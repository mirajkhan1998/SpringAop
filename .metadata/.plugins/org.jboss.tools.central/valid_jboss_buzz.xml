<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Possible issues with debugging and inspecting compiler-optimized binaries</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DgRbErEMLWQ/" /><category term="compiler optimization" scheme="searchisko:content:tags" /><category term="debugging" scheme="searchisko:content:tags" /><category term="dwarf debug" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gdb" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="systemtap" scheme="searchisko:content:tags" /><author><name>William Cohen</name></author><id>searchisko:content:id:jbossorg_blog-possible_issues_with_debugging_and_inspecting_compiler_optimized_binaries</id><updated>2020-03-13T07:00:57Z</updated><published>2020-03-13T07:00:57Z</published><content type="html">&lt;p&gt;Developers think of their programs as a serial sequence of operations running as written in the original source code. However, program source code is just a specification for computations. The compiler analyzes the source code and determines if changes to the specified operations will yield the same visible results but be more efficient. It will eliminate operations that are ultimately not visible, and rearrange operations to extract more parallelism and hide latency. These differences between the original program&amp;#8217;s source code and the optimized binary that actually runs might be visible when inspecting the execution of the optimized binary via tools like GDB and SystemTap.&lt;/p&gt; &lt;p&gt;To aid with the debugging and instrumentation of binaries the compiler generates debug information to map between the source code and executable binary. The debug information includes which line of source code each machine instruction is associated with, where the variables are located, and how to unwind the stack to get a backtrace of function calls. However, even with the compiler generating this information, a number of non-intuitive effects might be observed when instrumenting a compiler-optimized binary:&lt;/p&gt; &lt;p&gt;&lt;span id="more-673227"&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Expected probe points in code are missing.&lt;/li&gt; &lt;li&gt;Variable values might not be available at some locations.&lt;/li&gt; &lt;li&gt;A variable might have multiple values at a location.&lt;/li&gt; &lt;li&gt;Multiple variables have a mixture of old and new values existing at a location.&lt;/li&gt; &lt;li&gt;Multiple entirely different variables with the same name exist at a location.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These unexpected behaviors are some of the reasons that developers are encouraged to use &lt;code&gt;-Og&lt;/code&gt; rather than enabling compiler optimization with &lt;code&gt;-O2&lt;/code&gt; or &lt;code&gt;-O3&lt;/code&gt;. However, there are cases where developers might not have the option to recompile the code with more debugging-friendly options. Understanding why these situations happen might save you time and frustration when investigating a misbehaving program. Let&amp;#8217;s take a look.&lt;/p&gt; &lt;h2&gt;Missing probe points because lines are eliminated&lt;/h2&gt; &lt;p&gt;The binary code for a particular line of source code might be removed by the compiler because it has no effect on the later results. This removal might happen when the compiler data and control flow analysis for the function determines that while the code on the line is on a control flow path that could be executed, the values computed are never used. The debugging information that maps the instructions back to source code would have no entries for those eliminated lines. GDB and SystemTap would not be able to inspect the state of the program at those exact source code lines because they no longer exist in the binary.&lt;/p&gt; &lt;p&gt;These unexpected missing lines of source code might become more problematic when a function is inlined in multiple places: Some instances of the inlined function have a line optimized out, but other inlined versions keep that same line. This situation could lead to paths that should be instrumented being missed. SystemTap does have logic to place probe points near the missing line if the particular line isn&amp;#8217;t available, but in the case that there are instances of the line being included in the generated code, SystemTap might miss those other instances where the line was removed.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/DWARF" target="_blank" rel="noopener noreferrer"&gt;DWARF&lt;/a&gt; debug information specification includes a flag marking the start of a basic block that can help identify the other nearby lines on a per basic block basis. However, in the generated code examined so far, this flag doesn&amp;#8217;t seem to ever be set by the GCC or Clang compilers.&lt;/p&gt; &lt;h2&gt;The value for a variable might not exist at a point in the code&lt;/h2&gt; &lt;p&gt;Compilers try to be efficient and store values in places that have the lowest cost to access. On modern processors, the registers can be accessed with the least amount of delay. However, on most processors, there are only a limited number of registers to store values, making them a scarce resource.&lt;/p&gt; &lt;p&gt;The compiler register&amp;#8217;s allocation code attempts to maximize register utilization using the same registers to hold different variables at different times. The compiler may determine that a value for a variable is no longer used at one point in the binary and reuse the register to hold another variable, and that old variable value is lost once the new variable is written. Thus, a particular variable might not have any value available at a particular location in the machine code.&lt;/p&gt; &lt;h2&gt;Multiple values for a particular variable might exist at a probe point&lt;/h2&gt; &lt;p&gt;Developers might reuse a single variable to hold values that are not dependent on each other at different places in a function. The compiler might reorder the operations related to that variable in the binary so that those multiple values are live at the same time, in order to make use of the processor&amp;#8217;s ability to execute instructions in parallel or move operations earlier so they do not delay later dependent operations.&lt;/p&gt; &lt;p&gt;This effect might occur with the local variables of a function inlined multiple times in another function. The instructions for the multiple instances of the inline functions are reordered so that the different instances of the local variable from the inlined function are live at the same time. This effect might also happen with loop unrolling, where multiple iterations of a loop are scheduled together. The local variable &lt;code&gt;a&lt;/code&gt; for iteration &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;+1, &lt;code&gt;i&lt;/code&gt;+2, and &lt;code&gt;i&lt;/code&gt;+3 might all have values at the same point in the binary. With aggressive vectorization, this issue might become more common.&lt;/p&gt; &lt;h2&gt;Values for multiple variables might not be in a coherent state at a particular location&lt;/h2&gt; &lt;p&gt;As mentioned earlier, the compiler might interleave or change the order of operations. Below is a simple example one might want to probe on the line that computes &lt;code&gt;d&lt;/code&gt;, with the expectation that the current value of &lt;code&gt;a&lt;/code&gt; will be available:&lt;/p&gt; &lt;pre&gt;a = b + c /* source line 1 */ d = e * f /* source line 2 */ g = d + a /* source line 3 */&lt;/pre&gt; &lt;p&gt;However, the compiler might reorder the operations like the code below in order to provide more time between the calculation of &lt;code&gt;d&lt;/code&gt; and its use to compute &lt;code&gt;g&lt;/code&gt;. If the programmer inspects values immediately after running line two, the value of &lt;code&gt;d&lt;/code&gt; is available, but the value for &lt;code&gt;a&lt;/code&gt; has not been computed (unlike the original source code above):&lt;/p&gt; &lt;pre&gt;d = e * f /* source line 2 */ a = b + c /* source line 1 */ g = d + a /* source line 3 */&lt;/pre&gt; &lt;h2&gt;Completely different variables with the same name&lt;/h2&gt; &lt;p&gt;There may be multiple variables with the same name at a location in the executable. How many times have you seen the variable &lt;code&gt;i&lt;/code&gt; used as a loop iteration variable and &lt;code&gt;p&lt;/code&gt; used for pointers? For example, the variable used as an argument for a function call might be the same name as the parameter for an inlined function, or the inline function might have local variable names that are the same as the calling function. This setup could lead to confusion as to which function&amp;#8217;s variable &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt; you are examining.&lt;/p&gt; &lt;h2&gt;Debugging is hard&lt;/h2&gt; &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Brian_Kernighan" target="_blank" rel="noopener noreferrer"&gt;Brian Kernighan&lt;/a&gt; wrote in &lt;i&gt;The Elements of Programming Style&lt;/i&gt;, 2nd edition, Chapter 2:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Now, with clever compilers, debugging can be even harder! Make the code as simple as possible and consider using these &lt;a href="https://developers.redhat.com/blog/2018/05/14/making-the-operation-of-code-more-transparent-and-obvious/" target="_blank" rel="noopener noreferrer"&gt;techniques to make the code more transparent and obvious&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F13%2Fpossible-issues-with-debugging-and-inspecting-compiler-optimized-binaries%2F&amp;#38;linkname=Possible%20issues%20with%20debugging%20and%20inspecting%20compiler-optimized%20binaries" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F13%2Fpossible-issues-with-debugging-and-inspecting-compiler-optimized-binaries%2F&amp;#38;linkname=Possible%20issues%20with%20debugging%20and%20inspecting%20compiler-optimized%20binaries" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F13%2Fpossible-issues-with-debugging-and-inspecting-compiler-optimized-binaries%2F&amp;#38;linkname=Possible%20issues%20with%20debugging%20and%20inspecting%20compiler-optimized%20binaries" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F13%2Fpossible-issues-with-debugging-and-inspecting-compiler-optimized-binaries%2F&amp;#38;linkname=Possible%20issues%20with%20debugging%20and%20inspecting%20compiler-optimized%20binaries" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F13%2Fpossible-issues-with-debugging-and-inspecting-compiler-optimized-binaries%2F&amp;#38;linkname=Possible%20issues%20with%20debugging%20and%20inspecting%20compiler-optimized%20binaries" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F13%2Fpossible-issues-with-debugging-and-inspecting-compiler-optimized-binaries%2F&amp;#38;linkname=Possible%20issues%20with%20debugging%20and%20inspecting%20compiler-optimized%20binaries" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F13%2Fpossible-issues-with-debugging-and-inspecting-compiler-optimized-binaries%2F&amp;#38;linkname=Possible%20issues%20with%20debugging%20and%20inspecting%20compiler-optimized%20binaries" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F13%2Fpossible-issues-with-debugging-and-inspecting-compiler-optimized-binaries%2F&amp;#038;title=Possible%20issues%20with%20debugging%20and%20inspecting%20compiler-optimized%20binaries" data-a2a-url="https://developers.redhat.com/blog/2020/03/13/possible-issues-with-debugging-and-inspecting-compiler-optimized-binaries/" data-a2a-title="Possible issues with debugging and inspecting compiler-optimized binaries"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/13/possible-issues-with-debugging-and-inspecting-compiler-optimized-binaries/"&gt;Possible issues with debugging and inspecting compiler-optimized binaries&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DgRbErEMLWQ" height="1" width="1" alt=""/&gt;</content><summary>Developers think of their programs as a serial sequence of operations running as written in the original source code. However, program source code is just a specification for computations. The compiler analyzes the source code and determines if changes to the specified operations will yield the same visible results but be more efficient. It will eliminate operations that are ultimately not visible...</summary><dc:creator>William Cohen</dc:creator><dc:date>2020-03-13T07:00:57Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/13/possible-issues-with-debugging-and-inspecting-compiler-optimized-binaries/</feedburner:origLink></entry><entry><title>How to customize Fedora CoreOS for dedicated workloads with OSTree</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OL1euA4-byc/" /><category term="buildah" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="coreos" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="immutable" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Podman" scheme="searchisko:content:tags" /><category term="rpm-ostree" scheme="searchisko:content:tags" /><author><name>Gianni Salinetti</name></author><id>searchisko:content:id:jbossorg_blog-how_to_customize_fedora_coreos_for_dedicated_workloads_with_ostree</id><updated>2020-03-12T07:00:21Z</updated><published>2020-03-12T07:00:21Z</published><content type="html">&lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2020/03/10/how-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos/" target="_blank" rel="noopener noreferrer"&gt;part one of this series&lt;/a&gt;, I introduced &lt;a href="https://getfedora.org/en/coreos/" target="_blank" rel="noopener noreferrer"&gt;Fedora CoreOS&lt;/a&gt; (and &lt;a href="http://coreos.com/" target="_blank" rel="noopener noreferrer"&gt;Red Hat CoreOS&lt;/a&gt;) and explained why its immutable and atomic nature is important for running containers. I then walked you through getting Fedora CoreOS, creating an Ignition file, booting Fedora CoreOS, logging in, and running a test container. In this article, I will walk you through customizing Fedora CoreOS and making use of its immutable and atomic nature.&lt;/p&gt; &lt;h2 id="extending-ignition-files"&gt;Extending Ignition files&lt;/h2&gt; &lt;p&gt;In part one, we saw a basic example with a minimal Ignition file that we generated from an FCC file and then injected a public SSH key. We extend this example by adding more logic; for example, the creation of a &lt;code&gt;systemd&lt;/code&gt; unit. Since we are working on a container-optimized system why not create a &lt;code&gt;systemd&lt;/code&gt; unit with Podman? Thanks to the daemonless nature of Podman we can run, start or stop our containers in a systemd unit and manage their startup order easily.&lt;/p&gt; &lt;p&gt;For this purpose, I extended the previous FCC file:&lt;/p&gt; &lt;pre&gt;variant: fcos version: 1.0.0 passwd: users: - name: core ssh_authorized_keys: - ssh-rsa AAAAB3Nza... systemd: units: - name: hello.service enabled: true contents: | [Unit] Description=A hello world unit! After=network-online.target Wants=network-online.target [Service] Type=forking KillMode=none Restart=on-failure RemainAfterExit=yes ExecStartPre=podman pull quay.io/gbsalinetti/hello-server ExecStart=podman run -d --name hello-server -p 8080:8080 quay.io/gbsalinetti/hello-server ExecStop=podman stop -t 10 hello-server ExecStopPost=podman rm hello-server [Install] WantedBy=multi-user.target&lt;/pre&gt; &lt;p&gt;This time, I added a simple unit file to launch a self-made image that runs a minimal and ephemeral Go web server and then prints a &amp;#8220;Hello World&amp;#8221; message. The source code for the example &lt;a href="https://github.com/giannisalinetti/hello-server.git" target="_blank" rel="noopener noreferrer"&gt;can be found here&lt;/a&gt;. Take a look at the file&amp;#8217;s &lt;code&gt;systemd&lt;/code&gt; section and its &lt;code&gt;units&lt;/code&gt; subsection, which contains a list of items representing one or more unit files. In this block, we can define as many units as we need, and they will be created and started at boot.&lt;/p&gt; &lt;p&gt;We can use Ignition configs to manage storage and users; create files, directories, and &lt;code&gt;systemd&lt;/code&gt; units; and inject ssh keys. Detailed syntax documentation with examples of Ignition syntax can be found &lt;a href="https://docs.fedoraproject.org/en-US/fedora-coreos/fcct-config/" target="_blank" rel="noopener noreferrer"&gt;in the fcct-config documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After customizing the FCC file, we must generate the Ignition file using the &lt;code&gt;fcct&lt;/code&gt; tool:&lt;/p&gt; &lt;pre&gt;$ fcct -input example-fcc-systemd.yaml -output example-ignition-systemd.json&lt;/pre&gt; &lt;h2&gt;Testing the new instance&lt;/h2&gt; &lt;p&gt;We are ready to apply the generated Ignition file to the FCOS new instance using the &lt;code&gt;virt-install&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ sudo virt-install --connect qemu:///system \ -n fcos -r 2048 --os-variant=fedora31 --import \ --graphics=none \ --disk size=10,backing_store=/home/gbsalinetti/Labs/fedora-coreos/fedora-coreos-31.20200118.3.0-qemu.x86_64.qcow2 \ --qemu-commandline="-fw_cfg name=opt/com.coreos/config,file=/home/gbsalinetti/Labs/fedora-coreos/example-ignition-systemd.ign"&lt;/pre&gt; &lt;p&gt;At the end of the boot process, let’s log in and check if the container is running (update your IP address accordingly in the &lt;code&gt;ssh&lt;/code&gt; command):&lt;/p&gt; &lt;pre&gt;$ ssh core@192.168.122.11 Fedora CoreOS 31.20200118.3.0 Tracker: https://github.com/coreos/fedora-coreos-tracker Last login: Fri Feb 7 23:22:31 2020 from 192.168.122.1 [core@localhost ~]$ systemctl status hello.service ● hello.service - A hello world unit! Loaded: loaded (/etc/systemd/system/hello.service; enabled; vendor preset: enabled) Active: active (exited) since Fri 2020-02-07 23:18:39 UTC; 12min ago Process: 2055 ExecStartPre=/usr/bin/podman pull quay.io/gbsalinetti/hello-server (code=exited, status=0/SUCCESS) Process: 2112 ExecStart=/usr/bin/podman run -d --name hello-server -p 8080:8080 quay.io/gbsalinetti/hello-server (code=exited, status=0/SUCCESS) Main PID: 2112 (code=exited, status=0/SUCCESS) Feb 07 23:18:17 localhost podman[2055]: Writing manifest to image destination Feb 07 23:18:17 localhost podman[2055]: Storing signatures Feb 07 23:18:38 localhost podman[2055]: 2020-02-07 23:18:38.671593577 +0000 UTC m=+47.966065770 image pull Feb 07 23:18:38 localhost podman[2055]: 146c93bfc4df81797068fdc26ee396348ba8c83a2d21b2d7dffc242dcdf38adb Feb 07 23:18:38 localhost systemd[1]: Started A hello world unit!. Feb 07 23:18:39 localhost podman[2112]: 2020-02-07 23:18:39.020399261 +0000 UTC m=+0.271239416 container create 2abf8d30360c03aead01092bbd8a8a51182a603911aac&amp;#62; Feb 07 23:18:39 localhost podman[2112]: 2020-02-07 23:18:39.801631894 +0000 UTC m=+1.052472079 container init 2abf8d30360c03aead01092bbd8a8a51182a603911aac9f&amp;#62; Feb 07 23:18:39 localhost podman[2112]: 2020-02-07 23:18:39.845449198 +0000 UTC m=+1.096289478 container start 2abf8d30360c03aead01092bbd8a8a51182a603911aac9&amp;#62; Feb 07 23:18:39 localhost podman[2112]: 2abf8d30360c03aead01092bbd8a8a51182a603911aac9f8b4f5a465f0360f05 Feb 07 23:18:39 localhost systemd[1]: hello.service: Succeeded.&lt;/pre&gt; &lt;p&gt;We have launched a container as a one-shot Podman command. In the example, the command exited with a 0/SUCCESS status and the container was started successfully.&lt;/p&gt; &lt;p&gt;To inspect the running container, we can use the &lt;code&gt;podman ps&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2abf8d30360c quay.io/gbsalinetti/hello-server:latest hello-server 14 minutes ago Up 14 minutes ago 0.0.0.0:8080-&amp;#62;8080/tcp hello-server&lt;/pre&gt; &lt;p&gt;Why use &lt;code&gt;sudo&lt;/code&gt;? We launched Podman under &lt;code&gt;systemd&lt;/code&gt;, so the command was executed with root user privileges. This result is &lt;em&gt;not a rootless container&lt;/em&gt;, also called &lt;em&gt;rootful container&lt;/em&gt;.&lt;/p&gt; &lt;h2 id="the-rpm-ostree-tool"&gt;The &lt;code&gt;rpm-ostree&lt;/code&gt; tool&lt;/h2&gt; &lt;p&gt;Now that we have played with Ignition files, let us learn how to handle system changes starting with RPM packages installation, and learn how package installs are handled in FCOS. If we try to launch the &lt;code&gt;yum&lt;/code&gt; command in Fedora CoreOS we receive a &amp;#8220;command not found&amp;#8221; error. We get this same result running &lt;code&gt;dnf&lt;/code&gt;. Instead, the utility managing packages in this kind of architecture must wrap RPM-based package management on top of an atomic file system management library. Every package change must be committed to the file system.&lt;/p&gt; &lt;p&gt;We already mentioned the &lt;code&gt;rpm-ostree&lt;/code&gt; tool before. Let’s use it to apply a persistent change to the base OS image and then install &lt;a href="https://buildah.io/" target="_blank" rel="noopener noreferrer"&gt;the &lt;code&gt;buildah&lt;/code&gt; package&lt;/a&gt;. Buildah is a great tool for managing Open Container Initiative (OCI) image builds because it replicates all of the instructions found in a Dockerfile, allowing us to build images with or without a Dockerfile while not requiring root privileges.&lt;/p&gt; &lt;h3&gt;Installing new packages&lt;/h3&gt; &lt;p&gt;A short recap before installing: There is no &lt;code&gt;dnf&lt;/code&gt; or &lt;code&gt;yum&lt;/code&gt; tool installed in FCOS, and &lt;code&gt;rpm-ostree&lt;/code&gt; (built on top of the &lt;code&gt;libostree&lt;/code&gt; library) is the default package manager. Changes are committed internally and systems are rebooted to apply the new layer.&lt;/p&gt; &lt;p&gt;Let’s check the status of the system prior to installation:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ rpm-ostree status State: idle AutomaticUpdates: disabled Deployments: ● ostree://fedora:fedora/x86_64/coreos/stable Version: 31.20200118.3.0 (2020-01-28T16:10:53Z) Commit: 093f7da6ffa161ae1648a05be9c55f758258ab97b55c628bea5259f6ac6e370e GPGSignature: Valid signature by 7D22D5867F2A4236474BF7B850CB390B3C3359C4&lt;/pre&gt; &lt;p&gt;We can see only one layer here, with a specific commit ID. The &lt;code&gt;rpm-ostree status --json&lt;/code&gt; command can be used to print extended statuses.&lt;/p&gt; &lt;p&gt;Now, let’s install the &lt;code&gt;buildah&lt;/code&gt; package with the &lt;code&gt;rpm-ostree install&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ sudo rpm-ostree install buildah&lt;/pre&gt; &lt;p&gt;Let’s check the &lt;code&gt;rpm-ostree status&lt;/code&gt; output again:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ rpm-ostree status State: idle AutomaticUpdates: disabled Deployments: ostree://fedora:fedora/x86_64/coreos/stable Version: 31.20200118.3.0 (2020-01-28T16:10:53Z) BaseCommit: 093f7da6ffa161ae1648a05be9c55f758258ab97b55c628bea5259f6ac6e370e GPGSignature: Valid signature by 7D22D5867F2A4236474BF7B850CB390B3C3359C4 Diff: 1 added LayeredPackages: buildah ● ostree://fedora:fedora/x86_64/coreos/stable Version: 31.20200118.3.0 (2020-01-28T16:10:53Z) Commit: 093f7da6ffa161ae1648a05be9c55f758258ab97b55c628bea5259f6ac6e370e GPGSignature: Valid signature by 7D22D5867F2A4236474BF7B850CB390B3C3359C4&lt;/pre&gt; &lt;p&gt;The new commit added a new layer and the list of layered packages shows the Buildah package we installed before. We can then layer as many packages as we want; for example, &lt;code&gt;tcpdump&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo rpm-ostree install tcpdump&lt;/pre&gt; &lt;p&gt;When we run the &lt;code&gt;rpm-ostree status&lt;/code&gt; command again:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ rpm-ostree status State: idle AutomaticUpdates: disabled Deployments: ostree://fedora:fedora/x86_64/coreos/stable Version: 31.20200118.3.0 (2020-01-28T16:10:53Z) BaseCommit: 093f7da6ffa161ae1648a05be9c55f758258ab97b55c628bea5259f6ac6e370e GPGSignature: Valid signature by 7D22D5867F2A4236474BF7B850CB390B3C3359C4 Diff: 2 added LayeredPackages: buildah tcpdump ● ostree://fedora:fedora/x86_64/coreos/stable Version: 31.20200118.3.0 (2020-01-28T16:10:53Z) Commit: 093f7da6ffa161ae1648a05be9c55f758258ab97b55c628bea5259f6ac6e370e GPGSignature: Valid signature by 7D22D5867F2A4236474BF7B850CB390B3C3359C4&lt;/pre&gt; &lt;p&gt;The new commit has two layered packages. Let’s launch &lt;code&gt;buildah&lt;/code&gt; now:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ buildah --help -bash: buildah: command not found&lt;/pre&gt; &lt;p&gt;Ouch, it looks like the binary isn’t installed yet. Once again, this response is correct because the system is still running on top of the base layer. To solve this problem and see the layered packages, we need to restart the system so it boots into the new file system layer:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo systemctl reboot&lt;/pre&gt; &lt;p&gt;Now we can enjoy the layered packages we installed before as they appear in the file system after the reboot.&lt;/p&gt; &lt;h2&gt;How package management works&lt;/h2&gt; &lt;p&gt;When installing packages, we are not really creating a new commit. Instead, we are layering the packages on top of the current system commit with a new deployment. Those layered packages will persist across updates and rebases. In other words, &lt;code&gt;rpm-ostree&lt;/code&gt; fuses the best of image layers and package management.&lt;/p&gt; &lt;h3&gt;Rolling back changes&lt;/h3&gt; &lt;p&gt;The great thing about an atomic system the support for &lt;em&gt;atomic rollbacks&lt;/em&gt;. This feature is useful when we reach an unstable configuration after an update and need to go back immediately to a working and stable system:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo rpm-ostree rollback Moving '093f7da6ffa161ae1648a05be9c55f758258ab97b55c628bea5259f6ac6e370e.0' to be first deployment Transaction complete; bootconfig swap: no; deployment count change: 0 Removed: buildah-1.12.0-2.fc31.x86_64 tcpdump-14:4.9.3-1.fc31.x86_64 Run "systemctl reboot" to start a reboot&lt;/pre&gt; &lt;p&gt;Once again, a reboot is necessary to boot the system with the rolled back layer.&lt;/p&gt; &lt;h3&gt;Uninstalling&lt;/h3&gt; &lt;p&gt;If we need to uninstall a single package without rolling everything back, we can use the &lt;code&gt;rpm-ostree uninstall&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo rpm-ostree uninstall buildah Staging deployment... done Removed: buildah-1.12.0-2.fc31.x86_64 Run "systemctl reboot" to start a reboot&lt;/pre&gt; &lt;p&gt;After reboot, the package won&amp;#8217;t be available anymore.&lt;/p&gt; &lt;h2 id="more-in-depth-with-ostree"&gt;More in-depth with OSTree&lt;/h2&gt; &lt;p&gt;The &lt;code&gt;libostree&lt;/code&gt; library offers an API to manipulate atomic transactions on&lt;br /&gt; immutable file systems by managing them as whole trees. The &lt;code&gt;ostree&lt;/code&gt; command is the default tool used to manage these changes. There are many language bindings useful to create our own implementations; for example, &lt;a href="https://github.com/ostreedev/ostree-go"&gt;&lt;code&gt;ostree-go&lt;/code&gt;&lt;/a&gt; is the language binding for Golang.&lt;/p&gt; &lt;h3&gt;Listing branches&lt;/h3&gt; &lt;p&gt;We can see the delta between the two file system layers with the &lt;code&gt;ostree refs&lt;/code&gt; command. First, we need to locate the different &lt;em&gt;refs&lt;/em&gt; to the committed layers:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ ostree refs rpmostree/pkg/buildah/1.12.0-2.fc31.x86__64 rpmostree/base/0 ostree/0/1/1 rpmostree/pkg/tcpdump/14_3A4.9.3-1.fc31.x86__64 fedora:fedora/x86_64/coreos/stable ostree/0/1/0&lt;/pre&gt; &lt;p&gt;Think of the refs as different branches, like in a Git repository. Notice the branches created by &lt;code&gt;rpm-ostree&lt;/code&gt;, beginning with the pattern &lt;code&gt;rpmostree/pkg/&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Inspecting &lt;code&gt;refs&lt;/code&gt; content&lt;/h3&gt; &lt;p&gt;To inspect the changes that happened in a branch, we can use the &lt;code&gt;ostree ls&lt;/code&gt; command. For example, to see the files and directory changed by the &lt;code&gt;buildah&lt;/code&gt; package:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ ostree ls -R rpmostree/pkg/buildah/1.12.0-2.fc31.x86__64 d00755 0 0 0 / d00755 0 0 0 /usr d00755 0 0 0 /usr/bin -00755 0 0 37474136 /usr/bin/buildah d00755 0 0 0 /usr/lib d00755 0 0 0 /usr/lib/.build-id d00755 0 0 0 /usr/lib/.build-id/db l00777 0 0 0 /usr/lib/.build-id/db/7c450ca346e503747a530a7185d9c16dc9a132 -&amp;#62; ../../../../usr/bin/buildah d00755 0 0 0 /usr/share d00755 0 0 0 /usr/share/bash-completion d00755 0 0 0 /usr/share/bash-completion/completions -00644 0 0 22816 /usr/share/bash-completion/completions/buildah d00755 0 0 0 /usr/share/doc d00755 0 0 0 /usr/share/doc/buildah -00644 0 0 8450 /usr/share/doc/buildah/README.md d00755 0 0 0 /usr/share/licenses d00755 0 0 0 /usr/share/licenses/buildah -00644 0 0 11357 /usr/share/licenses/buildah/LICENSE d00755 0 0 0 /usr/share/man d00755 0 0 0 /usr/share/man/man1 -00644 0 0 719 /usr/share/man/man1/buildah-add.1.gz -00644 0 0 10290 /usr/share/man/man1/buildah-bud.1.gz -00644 0 0 2264 /usr/share/man/man1/buildah-commit.1.gz -00644 0 0 2426 /usr/share/man/man1/buildah-config.1.gz -00644 0 0 1359 /usr/share/man/man1/buildah-containers.1.gz -00644 0 0 662 /usr/share/man/man1/buildah-copy.1.gz -00644 0 0 8654 /usr/share/man/man1/buildah-from.1.gz -00644 0 0 1691 /usr/share/man/man1/buildah-images.1.gz -00644 0 0 891 /usr/share/man/man1/buildah-info.1.gz -00644 0 0 635 /usr/share/man/man1/buildah-inspect.1.gz -00644 0 0 1029 /usr/share/man/man1/buildah-login.1.gz -00644 0 0 637 /usr/share/man/man1/buildah-logout.1.gz -00644 0 0 1051 /usr/share/man/man1/buildah-manifest-add.1.gz -00644 0 0 856 /usr/share/man/man1/buildah-manifest-annotate.1.gz -00644 0 0 615 /usr/share/man/man1/buildah-manifest-create.1.gz -00644 0 0 334 /usr/share/man/man1/buildah-manifest-inspect.1.gz -00644 0 0 907 /usr/share/man/man1/buildah-manifest-push.1.gz -00644 0 0 459 /usr/share/man/man1/buildah-manifest-remove.1.gz -00644 0 0 608 /usr/share/man/man1/buildah-manifest.1.gz -00644 0 0 1072 /usr/share/man/man1/buildah-mount.1.gz -00644 0 0 2144 /usr/share/man/man1/buildah-pull.1.gz -00644 0 0 2440 /usr/share/man/man1/buildah-push.1.gz -00644 0 0 200 /usr/share/man/man1/buildah-rename.1.gz -00644 0 0 363 /usr/share/man/man1/buildah-rm.1.gz -00644 0 0 905 /usr/share/man/man1/buildah-rmi.1.gz -00644 0 0 4268 /usr/share/man/man1/buildah-run.1.gz -00644 0 0 225 /usr/share/man/man1/buildah-tag.1.gz -00644 0 0 298 /usr/share/man/man1/buildah-umount.1.gz -00644 0 0 1111 /usr/share/man/man1/buildah-unshare.1.gz -00644 0 0 312 /usr/share/man/man1/buildah-version.1.gz -00644 0 0 2539 /usr/share/man/man1/buildah.1.gz&lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Single directories from a branch can be listed as well:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ ostree ls -R rpmostree/pkg/buildah/1.12.0-2.fc31.x86__64 /usr/bin d00755 0 0 0 /usr/bin -00755 0 0 37830616 /usr/bin/buildah &lt;/pre&gt; &lt;p&gt;We can also check out a branch to an external directory with the &lt;code&gt;ostree checkout&lt;/code&gt; command. The following example applies to the &lt;code&gt;buildah&lt;/code&gt; ref:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo ostree checkout rpmostree/pkg/buildah/1.12.0-2.fc31.x86__64 /tmp/buildah_checkout&lt;/pre&gt; &lt;p&gt;After running the above command the &lt;code&gt;/tmp/buildah_checkout&lt;/code&gt; folder will contain all the files checked out from the &lt;code&gt;rpmostree/pkg/buildah/1.12.0-2.fc31.x86__64&lt;/code&gt; branch. This is a great feature for debugging and troubleshooting.&lt;/p&gt; &lt;h2&gt;Rebasing&lt;/h2&gt; &lt;p&gt;Now that we have introduced the &lt;code&gt;ostree&lt;/code&gt; command, we can show an amazing feature: &lt;em&gt;rebasing&lt;/em&gt;. With rebasing, we can move to a different branch and radically modify our file system tree.&lt;/p&gt; &lt;p&gt;Ever wonder how to switch from a stable release to a testing release and then to a rawhide without reinstalling? With rebasing it&amp;#8217;s possible!&lt;/p&gt; &lt;p&gt;The &lt;code&gt;rpm-ostree rebase&lt;/code&gt; command can take a branch as an argument and move the whole system to that branch. If we recall the output of the &lt;code&gt;ostree refs&lt;/code&gt; command, there was the following line: &lt;code&gt;fedora:fedora/x86_64/coreos/stable&lt;/code&gt;. This output means that we are on the &lt;code&gt;stable&lt;/code&gt; branch of Fedora CoreOS. If we want to switch to the &lt;code&gt;testing&lt;/code&gt; branch, we just have to rebase, like in the following example.&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo rpm-ostree rebase -b fedora:fedora/x86_64/coreos/testing ⠒ Receiving objects: 99% (5030/5031) 627.5 kB/s 151.2 MB Receiving objects: 99% (5030/5031) 627.5 kB/s 151.2 MB... done Staging deployment... done Upgraded: NetworkManager 1:1.20.8-1.fc31 -&amp;#62; 1:1.20.10-1.fc31 NetworkManager-libnm 1:1.20.8-1.fc31 -&amp;#62; 1:1.20.10-1.fc31 e2fsprogs 1.45.3-1.fc31 -&amp;#62; 1.45.5-1.fc31 e2fsprogs-libs 1.45.3-1.fc31 -&amp;#62; 1.45.5-1.fc31 fuse-overlayfs 0.7.3-2.fc31 -&amp;#62; 0.7.5-2.fc31 glibc 2.30-8.fc31 -&amp;#62; 2.30-10.fc31 glibc-all-langpacks 2.30-8.fc31 -&amp;#62; 2.30-10.fc31 glibc-common 2.30-8.fc31 -&amp;#62; 2.30-10.fc31 kernel 5.4.10-200.fc31 -&amp;#62; 5.4.13-201.fc31 kernel-core 5.4.10-200.fc31 -&amp;#62; 5.4.13-201.fc31 kernel-modules 5.4.10-200.fc31 -&amp;#62; 5.4.13-201.fc31 libcom_err 1.45.3-1.fc31 -&amp;#62; 1.45.5-1.fc31 libsolv 0.7.10-1.fc31 -&amp;#62; 0.7.11-1.fc31 libss 1.45.3-1.fc31 -&amp;#62; 1.45.5-1.fc31 pcre2 10.33-16.fc31 -&amp;#62; 10.34-4.fc31 selinux-policy 3.14.4-43.fc31 -&amp;#62; 3.14.4-44.fc31 selinux-policy-targeted 3.14.4-43.fc31 -&amp;#62; 3.14.4-44.fc31 socat 1.7.3.3-2.fc31 -&amp;#62; 1.7.3.4-1.fc31 toolbox 0.0.17-1.fc31 -&amp;#62; 0.0.18-1.fc31 whois-nls 5.5.4-1.fc31 -&amp;#62; 5.5.4-2.fc31 zchunk-libs 1.1.4-1.fc31 -&amp;#62; 1.1.5-1.fc31 Removed: buildah-1.12.0-2.fc31.x86_64 Run "systemctl reboot" to start a reboot&lt;/pre&gt; &lt;p&gt;Notice the list of packages upgraded to switch from the &lt;code&gt;stable&lt;/code&gt; to the &lt;code&gt;testing&lt;/code&gt; branch. Now, the &lt;code&gt;ostree refs&lt;/code&gt; output is slightly different, with the &lt;code&gt;testing&lt;/code&gt; branch replacing &lt;code&gt;stable&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ ostree refs rpmostree/pkg/buildah/1.12.0-2.fc31.x86__64 rpmostree/base/0 ostree/0/1/1 rpmostree/pkg/tcpdump/14_3A4.9.3-1.fc31.x86__64 fedora:fedora/x86_64/coreos/testing ostree/0/1/0&lt;/pre&gt; &lt;p&gt;This &lt;a href="https://github.com/coreos/fedora-coreos-tracker/blob/master/Design.md#release-streams" target="_blank" rel="noopener noreferrer"&gt;release streams link&lt;/a&gt; contains a more detailed discussion of how branches are managed.&lt;/p&gt; &lt;h2&gt;File system analysis&lt;/h2&gt; &lt;p&gt;It is easy to notice that some directories are not writable; for example, when trying to write to &lt;code&gt;/usr&lt;/code&gt;we get a read-only file system error. When the system boots, only certain portions (like &lt;code&gt;/var&lt;/code&gt;) are made writable. So, how does &lt;code&gt;ostree&lt;/code&gt; manage files?&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ostree&lt;/code&gt; architecture design states that the system read-only content is kept in the &lt;code&gt;/usr&lt;/code&gt; directory. The &lt;code&gt;/var&lt;/code&gt; directory is shared across all system deployments and is writable by processes, and there is an&lt;code&gt;/etc&lt;/code&gt; directory for every system deployment. When system changes or upgrades, previous modifications in the&lt;code&gt;/etc&lt;/code&gt; directory are merged with the copy in the new deployment.&lt;/p&gt; &lt;p&gt;All of these changes are stored in an OSTree repository in &lt;code&gt;/ostree/repo&lt;/code&gt;, which is a symlink to &lt;code&gt;/sysroot/ostree/repo&lt;/code&gt;. This directory stores all system deployments. Think of &lt;code&gt;/sysroot/ostree/repo&lt;/code&gt; like the &lt;code&gt;.git&lt;/code&gt;directory in a Git repository.&lt;/p&gt; &lt;p&gt;To check the current status and identify the active deployment UUID, use the following command:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo ostree admin status * fedora-coreos 4ea6beed22d0adc4599452de85820f6e157ac1750e688d062bfedc765b193505.0 Version: 31.20200210.3.0 origin refspec: fedora:fedora/x86_64/coreos/stable&lt;/pre&gt; &lt;p&gt;If we inspect the &lt;code&gt;/ostree&lt;/code&gt; folder in a freshly installed system, we find an exact match that contains our booted file system tree:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ ls -al /ostree/boot.1/fedora-coreos/19190477fad0e60d605a623b86e06bb92aa318b6b79f78696b06f68f262ad5d6/0/ total 8 drwxr-xr-x. 12 root root 253 Feb 24 16:52 . drwxrwxr-x. 3 root root 161 Feb 24 16:52 .. lrwxrwxrwx. 2 root root 7 Feb 24 16:51 bin -&amp;#62; usr/bin drwxr-xr-x. 2 root root 6 Jan 1 1970 boot drwxr-xr-x. 2 root root 6 Jan 1 1970 dev drwxr-xr-x. 77 root root 4096 Mar 11 08:54 etc lrwxrwxrwx. 2 root root 8 Feb 24 16:51 home -&amp;#62; var/home lrwxrwxrwx. 2 root root 7 Feb 24 16:51 lib -&amp;#62; usr/lib lrwxrwxrwx. 2 root root 9 Feb 24 16:51 lib64 -&amp;#62; usr/lib64 lrwxrwxrwx. 2 root root 9 Feb 24 16:51 media -&amp;#62; run/media lrwxrwxrwx. 2 root root 7 Feb 24 16:51 mnt -&amp;#62; var/mnt lrwxrwxrwx. 2 root root 7 Feb 24 16:51 opt -&amp;#62; var/opt lrwxrwxrwx. 2 root root 14 Feb 24 16:51 ostree -&amp;#62; sysroot/ostree drwxr-xr-x. 2 root root 6 Jan 1 1970 proc lrwxrwxrwx. 2 root root 12 Feb 24 16:51 root -&amp;#62; var/roothome drwxr-xr-x. 2 root root 6 Jan 1 1970 run lrwxrwxrwx. 2 root root 8 Feb 24 16:51 sbin -&amp;#62; usr/sbin lrwxrwxrwx. 2 root root 7 Feb 24 16:51 srv -&amp;#62; var/srv drwxr-xr-x. 2 root root 6 Jan 1 1970 sys drwxr-xr-x. 2 root root 6 Jan 1 1970 sysroot drwxrwxrwt. 2 root root 6 Mar 11 08:37 tmp drwxr-xr-x. 12 root root 155 Jan 1 1970 usr drwxr-xr-x. 4 root root 28 Mar 11 08:37 var&lt;/pre&gt; &lt;p&gt;The above directory represents the booted deployment and is actually a symbolic link to a ref under &lt;code&gt;/ostree/deploy/fedora-cores/deploy/&lt;/code&gt;. Notice that the directory&amp;#8217;s name will match with the UUID  printed by the &lt;code&gt;ostree admin status&lt;/code&gt; command&amp;#8217;s output.&lt;/p&gt; &lt;p&gt;At system boot, some directories in the filesystem root are created as hard links to the active deployment tree. Since hard links point to the same inode number in the file system, let&amp;#8217;s cross-check the inode number of the &lt;code&gt;/usr&lt;/code&gt; folder and the one in the booted deployment:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ ls -alid /usr 3218784 drwxr-xr-x. 12 root root 155 Jan 1 1970 /usr [core@localhost ~]$ ls -alid /sysroot/ostree/boot.1/fedora-coreos/19190477fad0e60d605a623b86e06bb92aa318b6b79f78696b06f68f262ad5d6/0/usr/ 3218784 drwxr-xr-x. 12 root root 155 Jan 1 1970 /sysroot/ostree/boot.1/fedora-coreos/19190477fad0e60d605a623b86e06bb92aa318b6b79f78696b06f68f262ad5d6/0/usr/&lt;/pre&gt; &lt;p&gt;As expected, the inode number 3218784 is the same for both directories, demonstrating that the content under the filesystem root is composed of the active deployment.&lt;/p&gt; &lt;p&gt;What happened when we installed the Buildah package with &lt;code&gt;rpm-ostree&lt;/code&gt;? After rebooting, a new deployment will appear:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo ostree admin status * fedora-coreos ee678bde3c15d8cae34515e84e2b4432ba3d8c9619ca92c319b576a13029481d.0 Version: 31.20200210.3.0 origin: &amp;#60;unknown origin type&amp;#62; fedora-coreos 4ea6beed22d0adc4599452de85820f6e157ac1750e688d062bfedc765b193505.0 (rollback) Version: 31.20200210.3.0 origin refspec: fedora:fedora/x86_64/coreos/stable&lt;/pre&gt; &lt;p&gt;Notice the star next to the current active deployment. We expect to find it under &lt;code&gt;/ostree/deploy/fedora-cores/deploy&lt;/code&gt;along with the old one:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ ls -al /ostree/deploy/fedora-coreos/deploy/ total 12 drwxrwxr-x. 4 root root 4096 Mar 11 10:18 . drwxrwxr-x. 4 root root 31 Feb 24 16:52 .. drwxr-xr-x. 12 root root 253 Feb 24 16:52 4ea6beed22d0adc4599452de85820f6e157ac1750e688d062bfedc765b193505.0 -rw-r--r--. 1 root root 52 Feb 24 16:52 4ea6beed22d0adc4599452de85820f6e157ac1750e688d062bfedc765b193505.0.origin drwxr-xr-x. 12 root root 253 Mar 11 10:01 ee678bde3c15d8cae34515e84e2b4432ba3d8c9619ca92c319b576a13029481d.0 -rw-r--r--. 1 root root 87 Mar 11 10:18 ee678bde3c15d8cae34515e84e2b4432ba3d8c9619ca92c319b576a13029481d.0.origin&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;/ostree/deploy/fedora-cores&lt;/code&gt; directory is also called &lt;em&gt;stateroot&lt;/em&gt; or &lt;em&gt;osname&lt;/em&gt;, and it contains the deployment and all its related commits. In every stateroot directory there is only one &lt;code&gt;var&lt;/code&gt; directory that is mounted under &lt;code&gt;/var&lt;/code&gt; using a &lt;code&gt;systemd&lt;/code&gt; mount unit (repesented by the file&lt;code&gt;/run/systemd/generator/var.mount&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s finish this file system deep dive with a look into the &lt;code&gt;/ostree/repo&lt;/code&gt; folder. This is where we can find the closest similarities with Git:&lt;/p&gt; &lt;pre&gt;[core@localhost repo]$ ls -al /ostree/repo/ total 16 drwxrwxr-x. 7 root root 102 Mar 11 10:18 . drwxrwxr-x. 5 root root 62 Mar 11 10:18 .. -rw-r--r--. 1 root root 73 Feb 24 16:52 config drwxr-xr-x. 3 root root 23 Mar 11 09:59 extensions -rw-------. 1 root root 0 Feb 24 16:51 .lock drwxr-xr-x. 258 root root 8192 Feb 24 16:52 objects drwxr-xr-x. 5 root root 49 Feb 24 16:51 refs drwxr-xr-x. 2 root root 6 Feb 24 16:52 state drwxr-xr-x. 3 root root 19 Mar 11 10:18 tmp&lt;/pre&gt; &lt;p&gt;Notice the &lt;code&gt;refs&lt;/code&gt; and &lt;code&gt;objects&lt;/code&gt; folders, which store respectively the branch information and the objects versioned. Here, we have an exact matching within the &lt;code&gt;.git&lt;/code&gt; folder of a typical Git repository.&lt;/p&gt; &lt;h2 id="managing-system-upgrades"&gt;Managing system upgrades&lt;/h2&gt; &lt;p&gt;It should be clear by now that &lt;code&gt;rpm-ostree&lt;/code&gt; works on top of the &lt;code&gt;ostree&lt;/code&gt; library and provides packages management with an atomic approach. System upgrades are also atomic. Upgrading a system is just layering a new commit on top of the existing file system, and we can do it easily with the &lt;code&gt;rpm-ostree upgrade&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo rpm-ostree upgrade -r&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;-r&lt;/code&gt; flag tells &lt;code&gt;rpm-ostree&lt;/code&gt; to automatically reboot after the upgrade is complete.&lt;/p&gt; &lt;p&gt;Despite letting users upgrade systems manually, FCOS provides a dedicated service that manages system upgrades called &lt;a href="https://github.com/coreos/zincati" target="_blank" rel="noopener noreferrer"&gt;Zincati&lt;/a&gt;. Zincati is an agent that performs periodic upgrade checks and applies them. We can check our Zincati service status with the &lt;code&gt;systemctl&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ sudo systemctl status zincati ● zincati.service - Zincati Update Agent Loaded: loaded (/usr/lib/systemd/system/zincati.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2020-02-07 11:36:33 UTC; 3min 30s ago Docs: https://github.com/coreos/zincati Main PID: 707 (zincati) Tasks: 2 (limit: 2297) Memory: 17.5M CGroup: /system.slice/zincati.service └─707 /usr/libexec/zincati agent -v Feb 07 11:36:33 localhost systemd[1]: Started Zincati Update Agent. Feb 07 11:36:33 localhost zincati[707]: [INFO ] starting update agent (zincati 0.0.6) Feb 07 11:36:39 localhost zincati[707]: [INFO ] Cincinnati service: https://updates.coreos.stg.fedoraproject.org Feb 07 11:36:39 localhost zincati[707]: [INFO ] agent running on node '20d1f6332922438d8a8edede3fbe6251', in update group 'default' Feb 07 11:36:39 localhost zincati[707]: [INFO ] initialization complete, auto-updates logic enabled&lt;/pre&gt; &lt;p&gt;Zincati behavior can be customized. Default configs are already installed under &lt;code&gt;/usr/lib/zincati/config.d/&lt;/code&gt;, while users can apply custom configs in &lt;code&gt;/etc/zincati/configs.d/&lt;/code&gt; and override the defaults.&lt;/p&gt; &lt;h2 id="fedora-coreos-red-hat-coreos-and-openshift"&gt;OpenShift 4 and the Machine Config Operator&lt;/h2&gt; &lt;p&gt;The developer community is working toward integrating OKD 4 and Fedora CoreOS and we are waiting the first stable release of OKD 4 very soon.&lt;/p&gt; &lt;p&gt;Nowadays, all &lt;a href="https://developers.redhat.com/products/openshift" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift Container Platform 4&lt;/a&gt; (RHOCP), run on top of Red Hat CoreOS (RHCOS) nodes. It’s useful to understand how RHCOS systems are managed. Let’s start with a provocation. In RHOCP 4, no sysadmin should SSH to the RHCOS or Fedora CoreOS nodes to make changes.&lt;/p&gt; &lt;p&gt;Who takes care of node management, upgrades, and who applies Ignition configs? All of these tasks are managed in OpenShift by the &lt;a href="https://github.com/openshift/machine-config-operator"&gt;Machine Config Operator&lt;/a&gt; (MCO), which was already mentioned in the previous article.&lt;/p&gt; &lt;p&gt;The MCO is a core opeator and it spawns different components in the OpenShift cluster:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;machine-config-server&lt;/code&gt; (MCS) serves the Ignition files to the nodes via HTTPS.&lt;/li&gt; &lt;li&gt;&lt;code&gt;machine-config-controller&lt;/code&gt; (MCC) coordinates upgrades of machines to their desired configurations as defined by &lt;code&gt;MachineConfig&lt;/code&gt; objects.&lt;/li&gt; &lt;li&gt;&lt;code&gt;machine-config-daemon&lt;/code&gt; (MCD) runs on every node as a DaemonSet, applying machine configurations and validating the machines&amp;#8217; state to the requested configurations.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;MCD performs configurations defined in the provided Ignition files using CoreOS technology. For more details about the &lt;code&gt;machine-config-daemon&lt;/code&gt;, &lt;a href="https://github.com/openshift/machine-config-operator/blob/master/docs/MachineConfigDaemon.md" target="_blank" rel="noopener noreferrer"&gt;read this documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The MCD manages system upgrades using Podman to pull and mount system images and &lt;code&gt;rpm-ostree rebase&lt;/code&gt; to rebase RHCOS nodes to the mounted container&amp;#8217;s file system trees. In other words, OCI images are used to transport whole, upgraded file systems to nodes.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;MachineConfig&lt;/code&gt; objects processed by the MCD are nothing but OpenShift resources that embed Ignition configs. MachineConfigs are assigned to a &lt;code&gt;MachineConfigPools&lt;/code&gt; and applied on all the machines belonging to that pool. Pools have a direct match with node roles in the cluster and by default we have only 2 MachineConfigPools in OCP 4, &lt;code&gt;master&lt;/code&gt;and &lt;code&gt;worker&lt;/code&gt;, but it is possible to add custom pools that reflect specific roles, for example infra nodes or HPC nodes.&lt;/p&gt; &lt;p&gt;The Machine Config Operator and the components it manages were created with the immutable and atomic approach in mind, implemented on top of Red Hat CoreOS in order to automate the day2 operations on nodes and deliver a &lt;em&gt;NoOps&lt;/em&gt; container platform to the customer.&lt;/p&gt; &lt;p&gt;The MCO architecture brings great value in hybrid cloud environment where the infrastructure automation is almost mandatory to manage complex scenarios.&lt;/p&gt; &lt;h2&gt;Conclusions&lt;/h2&gt; &lt;p&gt;This journey into the features of Fedora CoreOS and immutable systems has ended, but these two articles are just the beginning. Immutable infrastructures are the next big thing and not only in containerized workloads. I think that with the correct tooling they could be game-changers in traditional, bare metal, and on-prem scenarios.&lt;/p&gt; &lt;p&gt;By having reliable systems that are rebuilt rather than changed and managing images with a Git-like approach with commits, branches, and rollbacks, we can truly embrace the culture of Infrastructure-as-Code. This approach opens us to systems that are more maintainable, sustainable, and stable.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F12%2Fhow-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree%2F&amp;#38;linkname=How%20to%20customize%20Fedora%20CoreOS%20for%20dedicated%20workloads%20with%20OSTree" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F12%2Fhow-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree%2F&amp;#38;linkname=How%20to%20customize%20Fedora%20CoreOS%20for%20dedicated%20workloads%20with%20OSTree" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F12%2Fhow-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree%2F&amp;#38;linkname=How%20to%20customize%20Fedora%20CoreOS%20for%20dedicated%20workloads%20with%20OSTree" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F12%2Fhow-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree%2F&amp;#38;linkname=How%20to%20customize%20Fedora%20CoreOS%20for%20dedicated%20workloads%20with%20OSTree" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F12%2Fhow-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree%2F&amp;#38;linkname=How%20to%20customize%20Fedora%20CoreOS%20for%20dedicated%20workloads%20with%20OSTree" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F12%2Fhow-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree%2F&amp;#38;linkname=How%20to%20customize%20Fedora%20CoreOS%20for%20dedicated%20workloads%20with%20OSTree" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F12%2Fhow-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree%2F&amp;#38;linkname=How%20to%20customize%20Fedora%20CoreOS%20for%20dedicated%20workloads%20with%20OSTree" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F12%2Fhow-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree%2F&amp;#038;title=How%20to%20customize%20Fedora%20CoreOS%20for%20dedicated%20workloads%20with%20OSTree" data-a2a-url="https://developers.redhat.com/blog/2020/03/12/how-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree/" data-a2a-title="How to customize Fedora CoreOS for dedicated workloads with OSTree"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/12/how-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree/"&gt;How to customize Fedora CoreOS for dedicated workloads with OSTree&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OL1euA4-byc" height="1" width="1" alt=""/&gt;</content><summary>In part one of this series, I introduced Fedora CoreOS (and Red Hat CoreOS) and explained why its immutable and atomic nature is important for running containers. I then walked you through getting Fedora CoreOS, creating an Ignition file, booting Fedora CoreOS, logging in, and running a test container. In this article, I will walk you through customizing Fedora CoreOS and making use of its immutab...</summary><dc:creator>Gianni Salinetti</dc:creator><dc:date>2020-03-12T07:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/12/how-to-customize-fedora-coreos-for-dedicated-workloads-with-ostree/</feedburner:origLink></entry><entry><title>Red Hat Summit 2020 - Now a free virtual event</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PWk2FvbaroQ/red-hat-summit-2020-now-free-virtual-event.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2020_now_a_free_virtual_event</id><updated>2020-03-12T10:48:15Z</updated><published>2020-03-12T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.redhat.com/en/summit" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="400" data-original-width="800" height="160" src="https://1.bp.blogspot.com/-H7ZvSF3ZqxY/XmoTVcPCGWI/AAAAAAAAw-I/CrMwwUfVcQ8nkOXuGufmuGgbZ8c3UI-owCNcBGAsYHQ/s320/summit-virtual-event.jpeg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;There have been so many changes and cancellations for events across the world this last month as everyone tries to maintain safety and wellbeing for their employees.&lt;br /&gt;&lt;br /&gt;Red Hat Summit 2020 &lt;a href="https://www.redhat.com/en/summit" target="_blank"&gt;also posted a notice&lt;/a&gt; that the event would be moving to an online format, a virtual Red Hat Summit 2020.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;"We are taking this precautionary measure after closely monitoring developments with coronavirus (COVID-19) and guidance from the CDC, WHO, and other health authorities. We know you have questions, and we will continue to share answers as they become available. Stay tuned to the &lt;a href="https://www.redhat.com/en/blog/moving-red-hat-summit-2020-virtual-experience" target="_blank"&gt;Red Hat blog&lt;/a&gt; for additional information."&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;So what's this mean if you were looking forward to our &lt;a href="https://www.schabell.org/2019/12/red-hat-summit-2020-advanced-agile-integration-blueprint.html" target="_blank"&gt;session on advanced agile integration blueprints&lt;/a&gt;?&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;First off, we won't be in the same room nor have the chance to chat about the session face to face. Other than that, we plan to deliver this session live online for you to enjoy, so to remind you the session abstract is provided below.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://www.schabell.org/2019/12/red-hat-summit-2020-advanced-agile-integration-blueprint.html" target="_blank"&gt;Concept to Reality: An Advanced Agile Integration Blueprint&lt;/a&gt;&lt;/h3&gt;&lt;i&gt;Are you all in on the concept of agile integration or just getting your toe in the water? Are you an expert or just getting started with concepts like integration, microservices, message integration, process integration, APIs, and all the things that make your customers experience the best it can be? This session has something for all levels as it walks attendees through the architecture concepts with whiteboard diagrams, easy to grasp images, with a bottom up approach to connecting the dots for the concepts of an integration architecture. Once the groundwork has been laid, the second half of this session take a look at an integration architecture blueprint based on three successful customer integration solutions. Presenting the results of researching these successful solution architectures provides attendees with a clear blueprint for matching to their own architectures, or to help solidify their plans for architecting successful integration solutions. (with&amp;nbsp;&lt;a href="https://twitter.com/Christina_wm" target="_blank"&gt;Christina Lin&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Be sure to stay tuned for more information about exactly how the current schedule will be turned into virtual session slots. Hope to see you join us online and feel free to turn the Q&amp;amp;A afterwards into a virtual chat session!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jXrPq5NjsXM:8iuVmsBkHs4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jXrPq5NjsXM:8iuVmsBkHs4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jXrPq5NjsXM:8iuVmsBkHs4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=jXrPq5NjsXM:8iuVmsBkHs4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jXrPq5NjsXM:8iuVmsBkHs4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=jXrPq5NjsXM:8iuVmsBkHs4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jXrPq5NjsXM:8iuVmsBkHs4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=jXrPq5NjsXM:8iuVmsBkHs4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jXrPq5NjsXM:8iuVmsBkHs4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jXrPq5NjsXM:8iuVmsBkHs4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=jXrPq5NjsXM:8iuVmsBkHs4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/jXrPq5NjsXM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PWk2FvbaroQ" height="1" width="1" alt=""/&gt;</content><summary>There have been so many changes and cancellations for events across the world this last month as everyone tries to maintain safety and wellbeing for their employees. Red Hat Summit 2020 also posted a notice that the event would be moving to an online format, a virtual Red Hat Summit 2020. "We are taking this precautionary measure after closely monitoring developments with coronavirus (COVID-19) an...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-03-12T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/jXrPq5NjsXM/red-hat-summit-2020-now-free-virtual-event.html</feedburner:origLink></entry><entry><title>Some more C# 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/S7xq2uDSjgw/" /><category term=".NET Core" scheme="searchisko:content:tags" /><category term="C#" scheme="searchisko:content:tags" /><category term="C# 8" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="indices" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="ranges" scheme="searchisko:content:tags" /><category term="static local functions" scheme="searchisko:content:tags" /><category term="using declarations" scheme="searchisko:content:tags" /><author><name>Tom Deseyn</name></author><id>searchisko:content:id:jbossorg_blog-some_more_c_8</id><updated>2020-03-11T07:00:08Z</updated><published>2020-03-11T07:00:08Z</published><content type="html">&lt;p&gt;In previous articles, we covered &lt;a href="https://developers.redhat.com/blog/2020/02/24/c-8-asynchronous-streams/" target="_blank" rel="noopener noreferrer"&gt;C# 8 asynchronous streams&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2020/02/27/c-8-pattern-matching/" target="_blank" rel="noopener noreferrer"&gt;C# 8 pattern matching&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2020/03/03/c-8-default-interface-methods/" target="_blank" rel="noopener noreferrer"&gt;C# 8 default interface methods&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/blog/2020/03/05/c-8-nullable-reference-types/" target="_blank" rel="noopener noreferrer"&gt;C# 8 nullable reference types&lt;/a&gt;. In this final article, we&amp;#8217;ll look at &lt;code&gt;static&lt;/code&gt; local functions, indices and ranges, and &lt;code&gt;using&lt;/code&gt; declarations.&lt;/p&gt; &lt;h2&gt;&lt;code&gt;static&lt;/code&gt; local functions&lt;/h2&gt; &lt;p&gt;C# 7 introduced local functions, which are defined and used inside the caller function. Such functions can change their caller&amp;#8217;s local variables. To disallow this possibility and require explicit passing of all arguments, local functions can now be marked as &lt;code&gt;static&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;void Bar() { int i = 0; Foo(); static void Foo() { i = 3; // CS8421: A static local function cannot contain a reference to 'i' } } &lt;/pre&gt; &lt;h2&gt;Indices and ranges&lt;/h2&gt; &lt;p&gt;C# 8 adds a syntax for ranges. This syntax consists of the range operator (&lt;code&gt;..&lt;/code&gt;), which is surrounded by a &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; expression that specifies the index of the first element (which is included) and the index of the last element (which is excluded):&lt;/p&gt; &lt;pre&gt;string[] fruits = new string[] { "apple", "banana", "cherry", }; string[] allFruits = fruits[0..3]; string[] allFruits2 = fruits[0..fruits.Length]; string[] allFruits3 = fruits[0..(2 + 1)]; &lt;/pre&gt; &lt;p&gt;In the examples above, we take the range of all fruits by specifying &lt;code&gt;0&lt;/code&gt; as the start index and &lt;code&gt;3&lt;/code&gt; as the end index. The end index is one past the last element because C# indexing is zero-based. Because the end index is &lt;em&gt;not&lt;/em&gt; included in the range, we&amp;#8217;ve added one.&lt;/p&gt; &lt;p&gt;It’s also possible to index from the end using the &lt;code&gt;^&lt;/code&gt; operator, beginning with:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;^0&lt;/code&gt; as the index past the last element.&lt;/li&gt; &lt;li&gt;&lt;code&gt;^1&lt;/code&gt; as the last element.&lt;/li&gt; &lt;li&gt;&lt;code&gt;^2&lt;/code&gt; as the element preceding it.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here is an example:&lt;/p&gt; &lt;pre&gt;string[] lastTwoFruits = fruits[^2..^0];&lt;/pre&gt; &lt;p&gt;Simply keep increasing the number as you move further from &lt;code&gt;^0&lt;/code&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; By default, the start index is &lt;code&gt;0&lt;/code&gt;, and the end index is &lt;code&gt;^0&lt;/code&gt;, so one or both might be omitted:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;string[] allFruits4 = fruits[..]; string[] skipFirstTwoFruits = fruits[2..]; &lt;/pre&gt; &lt;p&gt;Reverse indexing can also be used directly:&lt;/p&gt; &lt;pre&gt;string lastFruit = fruits[^1]; &lt;/pre&gt; &lt;p&gt;The C# compiler uses the &lt;code&gt;System.Index&lt;/code&gt; and &lt;code&gt;System.Range&lt;/code&gt; types to represent the range and index. You can support your own types by adding &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/" target="_blank" rel="noopener noreferrer"&gt;indexers&lt;/a&gt; that take these types. Types that already have an indexer that takes an &lt;code&gt;int&lt;/code&gt; and an &lt;code&gt;int Count/Length&lt;/code&gt; property implicitly get support for reverse indexing. Types that additionally include a &lt;code&gt;Slice&lt;/code&gt; method that takes two &lt;code&gt;ints&lt;/code&gt; (assumed offset and count) implicitly get support for taking a range.&lt;/p&gt; &lt;p&gt;The .NET array (&lt;code&gt;string&lt;/code&gt;), and &lt;code&gt;Span&lt;/code&gt; support both indexes and ranges. The &lt;code&gt;List&lt;/code&gt; type supports indexes, but not ranges.&lt;/p&gt; &lt;h2&gt;&lt;code&gt;using&lt;/code&gt; declarations&lt;/h2&gt; &lt;p&gt;C# has support for disposing of variables with the &lt;code&gt;using&lt;/code&gt; keyword. Previous versions of C# required a block statement that explicitly scoped the lifetime:&lt;/p&gt; &lt;pre&gt;using (FileStream fs = File.OpenRead("myfile.txt")) { // explicit block ReadFromStream(fs); } &lt;/pre&gt; &lt;p&gt;With C# 8, this block is no longer needed. The compiler will use the declaring scope:&lt;/p&gt; &lt;pre&gt;using FileStream fs = File.Open("myfile.txt"); ReadFromStream(fs); &lt;/pre&gt; &lt;p&gt;As you can see, this reduces the indentation.&lt;/p&gt; &lt;h1&gt;Conclusion&lt;/h1&gt; &lt;p&gt;In this article, we’ve looked at three different C# 8 features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;static&lt;/code&gt; local functions, which require explicit passing of all arguments to local functions.&lt;/li&gt; &lt;li&gt;Indices and ranges, which introduce first-class support to denote ranges and perform reverse indexing.&lt;/li&gt; &lt;li&gt;&lt;code&gt;using&lt;/code&gt; declarations, which reduce levels of indentation when working with disposable objects.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;C# 8 can be used with the .NET Core 3.1 SDK, which is available on &lt;a href="https://access.redhat.com/documentation/en-us/net_core/" target="_blank" rel="noopener noreferrer"&gt;RHEL&lt;/a&gt;, &lt;a href="http://fedoraloves.net/" target="_blank" rel="noopener noreferrer"&gt;Fedora&lt;/a&gt;, &lt;a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener noreferrer"&gt;Windows, macOS, and other Linux distributions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F11%2Fsome-more-c-8%2F&amp;#38;linkname=Some%20more%20C%23%208" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F11%2Fsome-more-c-8%2F&amp;#38;linkname=Some%20more%20C%23%208" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F11%2Fsome-more-c-8%2F&amp;#38;linkname=Some%20more%20C%23%208" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F11%2Fsome-more-c-8%2F&amp;#38;linkname=Some%20more%20C%23%208" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F11%2Fsome-more-c-8%2F&amp;#38;linkname=Some%20more%20C%23%208" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F11%2Fsome-more-c-8%2F&amp;#38;linkname=Some%20more%20C%23%208" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F11%2Fsome-more-c-8%2F&amp;#38;linkname=Some%20more%20C%23%208" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F11%2Fsome-more-c-8%2F&amp;#038;title=Some%20more%20C%23%208" data-a2a-url="https://developers.redhat.com/blog/2020/03/11/some-more-c-8/" data-a2a-title="Some more C# 8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/11/some-more-c-8/"&gt;Some more C# 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/S7xq2uDSjgw" height="1" width="1" alt=""/&gt;</content><summary>In previous articles, we covered C# 8 asynchronous streams, C# 8 pattern matching, C# 8 default interface methods, and C# 8 nullable reference types. In this final article, we’ll look at static local functions, indices and ranges, and using declarations. static local functions C# 7 introduced local functions, which are defined and used inside the caller function. Such functions can change their ca...</summary><dc:creator>Tom Deseyn</dc:creator><dc:date>2020-03-11T07:00:08Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/11/some-more-c-8/</feedburner:origLink></entry><entry><title>Kogito, ergo Rules: From Knowledge To Service, Effortless</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2FD1UVc-tuQ/kogito-ergo-rules-from-knowledge-to.html" /><category term="#DroolsAI" scheme="searchisko:content:tags" /><category term="#jBPM" scheme="searchisko:content:tags" /><category term="#kogito" scheme="searchisko:content:tags" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Edoardo Vacchi</name></author><id>searchisko:content:id:jbossorg_blog-kogito_ergo_rules_from_knowledge_to_service_effortless</id><updated>2020-03-10T16:05:19Z</updated><published>2020-03-10T09:00:00Z</published><content type="html">&lt;div class="markdown-here-wrapper" data-md-url="https://www.blogger.com/blogger.g?blogID=5869426#editor/target=post;postID=120796410427423340;onPublishedMenu=allposts;onClosedMenu=allposts;postNum=0;src=postname"&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Welcome to another episode of this blog series on the Kogito initiative and our efforts to bring Drools to the cloud. The goal of these posts is to gather early user feedback on the features we are delivering to Kogito.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In this post we present &lt;b&gt;two new ways&lt;/b&gt; to realize a complete intelligent service:&lt;/div&gt;&lt;ol style="margin: 1.2em 0px; padding-left: 2em;"&gt;&lt;li style="margin: 0.5em 0px;"&gt;self-contained rule services&lt;/li&gt;&lt;li style="margin: 0.5em 0px;"&gt;integrated intelligent workflows with rule tasks&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="units-of-execution-in-kogito" style="border-bottom: 1px solid rgb(238, 238, 238); font-size: 1.4em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Units of Execution in Kogito&lt;/h2&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;As you may already know, in Kogito we are making front-and-center the new &lt;a href="http://blog.athico.com/2019/07/kogito-ergo-rules-part-2-all.html"&gt;Unit&lt;/a&gt; concept.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;“Unit of execution” is the term that we use to indicate an executable piece of knowledge. A unit may be a process, a set of rules, a decision, etc… In the case of a set of rules, we call it a &lt;i&gt;rule unit&lt;/i&gt;. If you opt-in to use units, &lt;b&gt;in Kogito&lt;/b&gt; we will take care of all the boilerplate that is required to generate a &lt;b&gt;REST endpoint &lt;/b&gt;automatically.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;A rule unit is constituted primarily by&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;1) a data definition;&lt;br /&gt;2) the set of rules and queries that implement the behavior of the unit (the rules of the rule engine);&lt;br /&gt;3) optionally, event listeners may be attached for a number of purposes.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In this post we’ll focus on data definitions, rules and queries.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;&lt;b&gt;Data definitions&lt;/b&gt; are given by declaring a Java class that may contain data sources. Each data source represents a partition of the working memory that your rules will pattern match against or insert to. &lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;For instance, suppose you want to declare an alerting service that receives events and produces alerts depending on some conditions. We declare &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;Event&lt;/code&gt; and &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;Alert&lt;/code&gt; objects as follows:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;package&lt;/span&gt; com.acme;&lt;br /&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;class&lt;/span&gt; &lt;span class="hljs-title" style="color: #990000; font-weight: bold;"&gt;Event&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt; String type;&lt;br /&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;int&lt;/span&gt; value;&lt;br /&gt; &lt;span class="hljs-comment" style="color: #999988; font-style: italic;"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;class&lt;/span&gt; &lt;span class="hljs-title" style="color: #990000; font-weight: bold;"&gt;Alert&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt; String severity;&lt;br /&gt; String message;&lt;br /&gt; &lt;span class="hljs-comment" style="color: #999988; font-style: italic;"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;The &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;AlertingService&lt;/code&gt; unit type declaration is a class that implements the interface &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;RuleUnitData&lt;/code&gt;.&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;package&lt;/span&gt; com.acme;&lt;br /&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;class&lt;/span&gt; &lt;span class="hljs-title" style="color: #990000; font-weight: bold;"&gt;AlertingService&lt;/span&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;implements&lt;/span&gt; &lt;span class="hljs-title" style="color: #990000; font-weight: bold;"&gt;RuleUnitData&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;final&lt;/span&gt; DataStream&amp;lt;Event&amp;gt; eventData = DataSource.createStream();&lt;br /&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;final&lt;/span&gt; DataStream&amp;lt;Alert&amp;gt; alertData = DataSource.createStream();&lt;br /&gt; &lt;span class="hljs-comment" style="color: #999988; font-style: italic;"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;&lt;b&gt;Rules&lt;/b&gt; are defined in DRL files as usual, except that you have now to indicate their &lt;b&gt;unit&lt;/b&gt; at the top of the file. For instance you may declare the data definition for &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;AlertingService&lt;/code&gt; as follows: &lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;package&lt;/span&gt; com.acme;&lt;br /&gt;unit AlertingService;&lt;br /&gt;rule IncomingEvent when&lt;br /&gt; &lt;span class="hljs-comment" style="color: #999988; font-style: italic;"&gt;// matches when a temperature higher than 30 °C is registered (OOPath syntax)&lt;/span&gt;&lt;br /&gt; $e : /eventData [ type == &lt;span class="hljs-string" style="color: #dd1144;"&gt;"temperature"&lt;/span&gt;, value &amp;gt;= &lt;span class="hljs-number" style="color: teal;"&gt;30&lt;/span&gt; ] &lt;br /&gt;then&lt;br /&gt; System.out.println(&lt;span class="hljs-string" style="color: #dd1144;"&gt;"incoming event: "&lt;/span&gt;+ $e.getMessage());&lt;br /&gt; alertData.append( &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;new&lt;/span&gt; Alert( &lt;span class="hljs-string" style="color: #dd1144;"&gt;"warning"&lt;/span&gt;, &lt;span class="hljs-string" style="color: #dd1144;"&gt;"Temperature is too high"&lt;/span&gt; ) );&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;As you can see, rules may match against or insert to the given data sources.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;&lt;b&gt;Queries&lt;/b&gt; are defined in DRL files like rules, and belong to a unit, too. If you declare at least one query, you will get &lt;b&gt;a REST endpoint automatically generated for free&lt;/b&gt;. For instance:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;query Warnings&lt;br /&gt; alerts: /alertData [ severity == &lt;span class="hljs-string" style="color: #dd1144;"&gt;"warning"&lt;/span&gt; ]&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;will generate the REST endpoint &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;/warnings&lt;/code&gt; that you will be able to invoke by POST-ing to it as follows:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-sh" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt; $ curl -X POST \&lt;br /&gt; -H &lt;span class="hljs-string" style="color: #dd1144;"&gt;'Accept: application/json'&lt;/span&gt; \&lt;br /&gt; -H &lt;span class="hljs-string" style="color: #dd1144;"&gt;'Content-Type: application/json'&lt;/span&gt; \&lt;br /&gt; &lt;span class="hljs-operator"&gt;-d&lt;/span&gt; &lt;span class="hljs-string" style="color: #dd1144;"&gt;'{ "eventData": [ { "type": "temperature", "value" : 40 } ] }'&lt;/span&gt; \&lt;br /&gt; http://localhost:&lt;span class="hljs-number" style="color: teal;"&gt;8080&lt;/span&gt;/warnings&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;This will generate the response:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-json" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;[ { "&lt;span class="hljs-attribute" style="color: teal;"&gt;severity&lt;/span&gt;": &lt;span class="hljs-value"&gt;&lt;span class="hljs-string" style="color: #dd1144;"&gt;"warning"&lt;/span&gt;&lt;/span&gt;, "&lt;span class="hljs-attribute" style="color: teal;"&gt;message&lt;/span&gt;" : &lt;span class="hljs-value"&gt;&lt;span class="hljs-string" style="color: #dd1144;"&gt;"Temperature is too high"&lt;/span&gt; &lt;/span&gt;} ]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;The Java-based data definition is very familiar to programmers, but, from early user feedback, &lt;i&gt;we decided to provide two alternative methods to declare a rule unit&lt;/i&gt;. We are publishing this blog post to gather more user feedback!&lt;/div&gt;&lt;h2 id="type-declaration" style="border-bottom: 1px solid rgb(238, 238, 238); font-size: 1.4em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Type Declaration&lt;/h2&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;The &lt;i&gt;type declaration&lt;/i&gt; is the DRL feature to declare Java-compatible types, in a Java-agnostic way. In the 7 series, users may declare types with the syntax:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;package&lt;/span&gt; com.acme;&lt;br /&gt;&lt;br /&gt;declare Event&lt;br /&gt; type: String&lt;br /&gt; value: &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;int&lt;/span&gt;&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;declare Alert&lt;br /&gt; severity: String&lt;br /&gt; message: String&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;This makes the DRL completely self-contained: entities and rules may be all defined using DRL. However, they have few limitations; for instance, they do not support implementing interfaces and they do not support generic type fields. In other words, the following declaration, in the 7 series, is syntactically invalid:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;package&lt;/span&gt; com.acme;&lt;br /&gt;declare AlertingService extends RuleUnitData&lt;br /&gt; eventData: DataStream&amp;lt;Event&amp;gt;&lt;br /&gt; alertData: DataStream&amp;lt;Alert&amp;gt;&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In version 0.8.0, we are lifting these limitations: we allow limited inheritance for interfaces (only one is allowed for now) and generic type declaration for fields. With these new features, the following piece of code becomes valid DRL.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Long story short: &lt;b&gt;you are now able to declare a full microservice&lt;br /&gt;from a single DRL&lt;/b&gt;.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Bootstrap your Kogito service with the archetype:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-sh" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt; mvn archetype:generate \&lt;br /&gt; -DarchetypeGroupId=org.kie.kogito \&lt;br /&gt; -DarchetypeArtifactId=kogito-quarkus-archetype \&lt;br /&gt; -DarchetypeVersion=&lt;span class="hljs-number" style="color: teal;"&gt;0.8&lt;/span&gt;.&lt;span class="hljs-number" style="color: teal;"&gt;0&lt;/span&gt; \&lt;br /&gt; -DgroupId=com.acme \&lt;br /&gt; -DartifactId=sample-kogito&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;At the moment, no Quarkus version bundles Kogito 0.8.0; otherwise, you would be able to use &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;mvn io.quarkus:quarkus-maven-plugin:create&lt;/code&gt; instead.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Now, clear the contents of &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;src/main&lt;/code&gt; and then, drop this DRL to &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;src/main/resources/com/acme&lt;/code&gt; folder instead:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;package&lt;/span&gt; com.acme;&lt;br /&gt;unit AlertingService;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;import&lt;/span&gt; org.kie.kogito.rules.DataStream;&lt;br /&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;import&lt;/span&gt; org.kie.kogito.rules.RuleUnitData;&lt;br /&gt;&lt;br /&gt;declare Event&lt;br /&gt; type: String&lt;br /&gt; value: &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;int&lt;/span&gt;&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;declare Alert&lt;br /&gt; severity: String&lt;br /&gt; message: String&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;declare AlertingService extends RuleUnitData&lt;br /&gt; eventData: DataStream&amp;lt;Event&amp;gt;&lt;br /&gt; alertData: DataStream&amp;lt;Alert&amp;gt;&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;rule IncomingEvent when&lt;br /&gt; &lt;span class="hljs-comment" style="color: #999988; font-style: italic;"&gt;// matches when a temperature higher than 30 °C is registered (OOPath syntax)&lt;/span&gt;&lt;br /&gt; $e : /eventData [ type == &lt;span class="hljs-string" style="color: #dd1144;"&gt;"temperature"&lt;/span&gt;, value &amp;gt;= &lt;span class="hljs-number" style="color: teal;"&gt;30&lt;/span&gt; ] &lt;br /&gt;then&lt;br /&gt; System.out.println(&lt;span class="hljs-string" style="color: #dd1144;"&gt;"incoming event: "&lt;/span&gt;+ $e.getMessage());&lt;br /&gt; alertData.append( &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;new&lt;/span&gt; Alert( &lt;span class="hljs-string" style="color: #dd1144;"&gt;"warning"&lt;/span&gt;, &lt;span class="hljs-string" style="color: #dd1144;"&gt;"Temperature is too high: "&lt;/span&gt; + $e ) );&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;query Warnings&lt;br /&gt; alerts: /alertData [ severity == &lt;span class="hljs-string" style="color: #dd1144;"&gt;"warning"&lt;/span&gt; ]&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Now fire up the Quarkus service in developer mode with:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-sh" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt; $ mvn compile quarkus:dev&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;There you go, you are now ready to &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;curl&lt;/code&gt; your service:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-sh" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt; $ curl -X POST \&lt;br /&gt; -H &lt;span class="hljs-string" style="color: #dd1144;"&gt;'Accept: application/json'&lt;/span&gt; \&lt;br /&gt; -H &lt;span class="hljs-string" style="color: #dd1144;"&gt;'Content-Type: application/json'&lt;/span&gt; \&lt;br /&gt; &lt;span class="hljs-operator"&gt;-d&lt;/span&gt; &lt;span class="hljs-string" style="color: #dd1144;"&gt;'{ "eventData": [ { "type": "temperature", "value" : 40 } ] }'&lt;/span&gt; \&lt;br /&gt; http://localhost:&lt;span class="hljs-number" style="color: teal;"&gt;8080&lt;/span&gt;/warnings&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="workflow-integration" style="border-bottom: 1px solid rgb(238, 238, 238); font-size: 1.4em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Workflow Integration&lt;/h2&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Another way to expose a rule-based service is through a &lt;i&gt;workflow&lt;/i&gt;.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;A &lt;i&gt;workflow&lt;/i&gt; (sometimes called a “business process”) describes a sequence of steps in a diagram and it usually declares &lt;i&gt;variables&lt;/i&gt;: data holders for values that are manipulated in the execution. The data type of one such variable may be &lt;i&gt;anything&lt;/i&gt;: you may use Java classes, but, in this example, we will use again our declared data types. &lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;package&lt;/span&gt; com.acme;&lt;br /&gt;&lt;br /&gt;declare Event&lt;br /&gt; type: String&lt;br /&gt; value: &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;int&lt;/span&gt;&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;declare Alert&lt;br /&gt; severity: String&lt;br /&gt; message: String&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Let us call this workflow &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;com.acme.AlertingWorkflow&lt;/code&gt;, and declare the variables &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;eventData&lt;/code&gt; and &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;alertData&lt;/code&gt;:&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;&lt;img alt="workflow" height="105" src="https://raw.githubusercontent.com/evacchi/kogito-rules-example/master/imgs/variables.png" width="640" /&gt;&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;A workflow that includes a &lt;i&gt;rule task&lt;/i&gt; may skip the rule unit data &lt;i&gt;declaration&lt;/i&gt; altogether: in this case the rule unit is inferred directly from the structure of the process: each variable will be &lt;b&gt;inserted into data source of the same name&lt;/b&gt;.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;&lt;img alt="workflow" height="141" src="https://raw.githubusercontent.com/evacchi/kogito-rules-example/master/imgs/workflow.png" width="640" /&gt;&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;The &lt;i&gt;name&lt;/i&gt; of the unit is declared by the process, using the syntax &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;unit:com.acme.AlertingService&lt;/code&gt;. You are still free to explicitly declare the unit &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;com.acme.AlertingService&lt;/code&gt;; in that case, the process will pick up the declaration that you have hand-coded.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Note: You may have noticed that we are using the “Rule Flow Group” field. We will implement more explicit support in the UI in the future.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Bootstrap your Kogito service with the archetype:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-sh" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt; mvn archetype:generate \&lt;br /&gt; -DarchetypeGroupId=org.kie.kogito \&lt;br /&gt; -DarchetypeArtifactId=kogito-quarkus-archetype \&lt;br /&gt; -DarchetypeVersion=&lt;span class="hljs-number" style="color: teal;"&gt;0.8&lt;/span&gt;.&lt;span class="hljs-number" style="color: teal;"&gt;0&lt;/span&gt; \&lt;br /&gt; -DgroupId=com.acme \&lt;br /&gt; -DartifactId=sample-kogito&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;&lt;b&gt;Caveat&lt;/b&gt;. Support for this feature is experimental, so it may not work seamlessly with Quarkus hot code reload; we also need the following extra step to enable it, but this will change in the future.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Update your &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;pom.xml&lt;/code&gt; with the following plugin declaration:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-xml" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.kie.kogito&lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;kogito-maven-plugin&lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.8.0&lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;generateDeclaredTypes&lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; ...&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-tag" style="color: navy; font-weight: normal;"&gt;&amp;lt;/&lt;span class="hljs-title" style="color: navy; font-weight: normal;"&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;You can now clear the contents of &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;src/main&lt;/code&gt;, and then drop the process and the following DRL to &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;src/main/resources/com/acme&lt;/code&gt; folder.&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;package&lt;/span&gt; com.acme;&lt;br /&gt;unit AlertingService;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;import&lt;/span&gt; org.kie.kogito.rules.DataStream;&lt;br /&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;import&lt;/span&gt; org.kie.kogito.rules.RuleUnitData; &lt;br /&gt;&lt;br /&gt;declare Event&lt;br /&gt; type: String&lt;br /&gt; value: &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;int&lt;/span&gt;&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;declare Alert&lt;br /&gt; severity: String&lt;br /&gt; message: String&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;rule IncomingEvent when&lt;br /&gt; &lt;span class="hljs-comment" style="color: #999988; font-style: italic;"&gt;// matches when a temperature higher than 30 °C is registered (OOPath syntax)&lt;/span&gt;&lt;br /&gt; $e : /eventData [ type == &lt;span class="hljs-string" style="color: #dd1144;"&gt;"temperature"&lt;/span&gt;, value &amp;gt;= &lt;span class="hljs-number" style="color: teal;"&gt;30&lt;/span&gt; ]&lt;br /&gt;then&lt;br /&gt; System.out.println(&lt;span class="hljs-string" style="color: #dd1144;"&gt;"incoming event: "&lt;/span&gt;+ $e.getMessage());&lt;br /&gt; alertData.set( &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;new&lt;/span&gt; Alert( &lt;span class="hljs-string" style="color: #dd1144;"&gt;"warning"&lt;/span&gt;, &lt;span class="hljs-string" style="color: #dd1144;"&gt;"Temperature is too high: "&lt;/span&gt; + $e ) );&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;As you may have noticed, you are not required to declare a query explicitly: the process will display the contents of the variables as a response; it will generate the endpoint &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;/AlertingWorkflow&lt;/code&gt;, and it accept a &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;POST&lt;/code&gt; request of the following form:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-sh" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt; $ curl -X POST \&lt;br /&gt; -H &lt;span class="hljs-string" style="color: #dd1144;"&gt;'Accept: application/json'&lt;/span&gt; \&lt;br /&gt; -H &lt;span class="hljs-string" style="color: #dd1144;"&gt;'Content-Type: application/json'&lt;/span&gt; \&lt;br /&gt; &lt;span class="hljs-operator"&gt;-d&lt;/span&gt; &lt;span class="hljs-string" style="color: #dd1144;"&gt;'{ "eventData": { "type": "temperature", "value" : 40 } }'&lt;/span&gt; \&lt;br /&gt; http://localhost:&lt;span class="hljs-number" style="color: teal;"&gt;8080&lt;/span&gt;/AlertingWorkflow&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;The reply will be:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-json" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;{&lt;br /&gt; "&lt;span class="hljs-attribute" style="color: teal;"&gt;id&lt;/span&gt;": &lt;span class="hljs-value"&gt;...&lt;/span&gt;,&lt;br /&gt; "&lt;span class="hljs-attribute" style="color: teal;"&gt;eventData&lt;/span&gt;": &lt;span class="hljs-value"&gt;{&lt;br /&gt; "&lt;span class="hljs-attribute" style="color: teal;"&gt;type&lt;/span&gt;": &lt;span class="hljs-value"&gt;&lt;span class="hljs-string" style="color: #dd1144;"&gt;"temperature"&lt;/span&gt;&lt;/span&gt;,&lt;br /&gt; "&lt;span class="hljs-attribute" style="color: teal;"&gt;value&lt;/span&gt;": &lt;span class="hljs-value"&gt;&lt;span class="hljs-number" style="color: teal;"&gt;100&lt;/span&gt;&lt;br /&gt; &lt;/span&gt;}&lt;/span&gt;,&lt;br /&gt; "&lt;span class="hljs-attribute" style="color: teal;"&gt;alertData&lt;/span&gt;": &lt;span class="hljs-value"&gt;{&lt;br /&gt; "&lt;span class="hljs-attribute" style="color: teal;"&gt;severity&lt;/span&gt;": &lt;span class="hljs-value"&gt;&lt;span class="hljs-string" style="color: #dd1144;"&gt;"warning"&lt;/span&gt;&lt;/span&gt;,&lt;br /&gt; "&lt;span class="hljs-attribute" style="color: teal;"&gt;message&lt;/span&gt;": &lt;span class="hljs-value"&gt;&lt;span class="hljs-string" style="color: #dd1144;"&gt;"Temperature is too high: Event( type=temperature, value=100 )"&lt;/span&gt;&lt;br /&gt; &lt;/span&gt;}&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;However, if you &lt;i&gt;do&lt;/i&gt; declare a query, a separate endpoint will be available as well. For instance if you declare the query &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;Warnings&lt;/code&gt; you will still be able to POST to &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;http://localhost:8080/warnings&lt;/code&gt; and invoke the rule service separately as follows:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code style="background-color: #f8f8f8; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); display: block !important; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow: auto; padding: 0.5em 0.7em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;$ curl -X POST \&lt;br /&gt; -H 'Accept: application/json' \&lt;br /&gt; -H 'Content-Type: application/json' \&lt;br /&gt; -d '{ "eventData": { "type": "temperature", "value" : 40 } }' \&lt;br /&gt; http://localhost:8080/warnings&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Notice that the request no longer contains a list of Events. This is because process variables are mapped to single values instead of DataStreams. &lt;/div&gt;&lt;h2 id="conclusion" style="border-bottom: 1px solid rgb(238, 238, 238); font-size: 1.4em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Conclusion&lt;/h2&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;We have given a sneak peek on the work that we are doing to improve the getting started experience with rules and processes in Kogito. With these changes, we hope to have provided a more streamlined way to define knowledge-based services. Developers will always able to be more explicit about the data they want to process, by opting-in to writing Java; but if they want, they can embrace a fully DSL-centric development workflow.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;&lt;i&gt;For the lazies, examples are available at &lt;a href="https://github.com/evacchi/kogito-rules-example/tree/master/code"&gt;https://github.com/evacchi/kogito-rules-example/tree/master/code&lt;/a&gt; Have fun!&lt;/i&gt;&lt;/div&gt;&lt;div style="font-size: 0em; height: 0; margin: 0; max-height: 0; max-width: 0; overflow: hidden; padding: 0; width: 0;" title="MDH:PHA+PGJyPjwvcD48cD5XZWxjb21lIHRvIGFub3RoZXIgZXBpc29kZSBvZiB0aGlzIGJsb2cgc2Vy aWVzIG9uIHRoZSBLb2dpdG8gaW5pdGlhdGl2ZSBhbmQgb3VyIGVmZm9ydHMgdG8gYnJpbmcgRHJv b2xzIHRvIHRoZSBjbG91ZC4gVGhlIGdvYWwgb2YgdGhlc2UgcG9zdHMgaXMgdG8gZ2F0aGVyIGVh cmx5IHVzZXIgZmVlZGJhY2sgb24gdGhlIGZlYXR1cmVzIHdlIGFyZSBkZWxpdmVyaW5nIHRvIEtv Z2l0by48L3A+PHA+PGJyPjwvcD48cD5JbiB0aGlzIHBvc3Qgd2UgcHJlc2VudCAqKnR3byBuZXcg d2F5cyoqIHRvIHJlYWxpemUgYSBjb21wbGV0ZSBpbnRlbGxpZ2VudCBzZXJ2aWNlOjwvcD48cD48 YnI+PC9wPjxwPjEuIHNlbGYtY29udGFpbmVkIHJ1bGUgc2VydmljZXM8L3A+PHA+Mi4gaW50ZWdy YXRlZCBpbnRlbGxpZ2VudCB3b3JrZmxvd3Mgd2l0aCBydWxlIHRhc2tzPC9wPjxwPjxicj48L3A+ PHA+IyMgVW5pdHMgb2YgRXhlY3V0aW9uIGluIEtvZ2l0bzwvcD48cD48YnI+PC9wPjxwPkFzIHlv dSBtYXkgYWxyZWFkeSBrbm93LCBpbiBLb2dpdG8gd2UgYXJlIG1ha2luZyBmcm9udC1hbmQtY2Vu dGVyIHRoZSBuZXcgW1VuaXRdKGh0dHA6Ly9ibG9nLmF0aGljby5jb20vMjAxOS8wNy9rb2dpdG8t ZXJnby1ydWxlcy1wYXJ0LTItYWxsLmh0bWwpIGNvbmNlcHQuPC9wPjxwPjxicj48L3A+PHA+IlVu aXQgb2YgZXhlY3V0aW9uIiB0aGF0IHdlIHVzZSB0byBpbmRpY2F0ZSBhbiBleGVjdXRhYmxlIHBp ZWNlIG9mIGtub3dsZWRnZS4gQSB1bml0IG1heSBiZSBhIHByb2Nlc3MsIGEgc2V0IG9mIHJ1bGVz LCBhIGRlY2lzaW9uLCBldGMuLi4gSW4gdGhlIGNhc2Ugb2YgYSBzZXQgb2YgcnVsZXMsIHdlIGNh bGwgaXQgYSAqcnVsZSB1bml0Ki4gSWYgeW91IG9wdC1pbiB0byB1c2UgdW5pdHMsICoqaW4gS29n aXRvKiogd2Ugd2lsbCB0YWtlIGNhcmUgb2YgYWxsIHRoZSBib2lsZXJwbGF0ZSB0aGF0IGlzIHJl cXVpcmVkIHRvIGdlbmVyYXRlIGEgKipSRVNUIGVuZHBvaW50KiogYXV0b21hdGljYWxseS48L3A+ PHA+PGJyPjwvcD48cD5BIHJ1bGUgdW5pdCBpcyBjb25zdGl0dXRlZCBieSBwcmltYXJpbHkgYnk8 L3A+PHA+PGJyPjwvcD48cD4xKSBhIGRhdGEgZGVmaW5pdGlvbjs8L3A+PHA+MikgdGhlIHNldCBv ZiBydWxlcyBhbmQgcXVlcmllcyB0aGF0IGltcGxlbWVudCB0aGUgYmVoYXZpb3Igb2YgdGhlIHVu aXQgKHRoZSBydWxlcyBvZiB0aGUgcnVsZSBlbmdpbmUpOyA8L3A+PHA+Mykgb3B0aW9uYWxseSwg ZXZlbnQgbGlzdGVuZXJzIG1heSBiZSBhdHRhY2hlZCBmb3IgYSBudW1iZXIgb2YgcHVycG9zZXMu PC9wPjxwPjxicj48L3A+PHA+SW4gdGhpcyBwb3N0IHdlJ2xsIGZvY3VzIG9uIGRhdGEgZGVmaW5p dGlvbnMsIHJ1bGVzIGFuZCBxdWVyaWVzLjwvcD48cD48YnI+PC9wPjxwPioqRGF0YSBkZWZpbml0 aW9ucyoqIGFyZSBnaXZlbiBieSBkZWNsYXJpbmcgYSBKYXZhIGNsYXNzIHRoYXQgbWF5IGNvbnRh aW4gZGF0YSBzb3VyY2VzLiBFYWNoIGRhdGEgc291cmNlIHJlcHJlc2VudHMgYSBwYXJ0aXRpb24g b2YgdGhlIHdvcmtpbmcgbWVtb3J5IHRoYXQgeW91ciBydWxlcyB3aWxsIHBhdHRlcm4gbWF0Y2gg YWdhaW5zdCBvciBpbnNlcnQgdG8uIDwvcD48cD48YnI+PC9wPjxwPkZvciBpbnN0YW5jZSwgc3Vw cG9zZSB5b3Ugd2FudCB0byBkZWNsYXJlIGFuIGFsZXJ0aW5nIHNlcnZpY2UgdGhhdCByZWNlaXZl cyBldmVudHMgYW5kIHByb2R1Y2VzIGFsZXJ0czwvcD48cD5kZXBlbmRpbmcgb24gc29tZSBjb25k aXRpb25zLiBXZSBkZWNsYXJlIGBFdmVudGAgYW5kIGBBbGVydGAgb2JqZWN0cyBhcyBmb2xsb3dz OjwvcD48cD48YnI+PC9wPjxwPmBgYGphdmE8L3A+PHA+cGFja2FnZSBjb20uYWNtZTs8L3A+PHA+ cHVibGljIGNsYXNzIEV2ZW50IHs8L3A+PHA+Jm5ic3A7Jm5ic3A7IFN0cmluZyB0eXBlOzwvcD48 cD4mbmJzcDsmbmJzcDsgaW50IHZhbHVlOzwvcD48cD4mbmJzcDsmbmJzcDsgLy8gZ2V0dGVycyBh bmQgc2V0dGVyczwvcD48cD59PC9wPjxwPjxicj48L3A+PHA+cHVibGljIGNsYXNzIEFsZXJ0IHs8 L3A+PHA+Jm5ic3A7IFN0cmluZyBzZXZlcml0eTs8L3A+PHA+Jm5ic3A7IFN0cmluZyBtZXNzYWdl OzwvcD48cD4mbmJzcDsgLy8gZ2V0dGVycyBhbmQgc2V0dGVyczwvcD48cD59PC9wPjxwPmBgYDwv cD48cD5UaGUgYEFsZXJ0aW5nU2VydmljZWAgdW5pdCB0eXBlIGRlY2xhcmF0aW9uIGlzIGEgY2xh c3MgdGhhdCBpbXBsZW1lbnRzIHRoZSBpbnRlcmZhY2UgYFJ1bGVVbml0RGF0YWAuPC9wPjxwPjxi cj48L3A+PHA+YGBgamF2YTwvcD48cD5wYWNrYWdlIGNvbS5hY21lOzwvcD48cD5wdWJsaWMgY2xh c3MgQWxlcnRpbmdTZXJ2aWNlIGltcGxlbWVudHMgUnVsZVVuaXREYXRhIHs8L3A+PHA+Jm5ic3A7 Jm5ic3A7IHByaXZhdGUgZmluYWwgRGF0YVN0cmVhbSZsdDtFdmVudCZndDsgZXZlbnREYXRhID0g RGF0YVNvdXJjZS5jcmVhdGVTdHJlYW0oKTs8L3A+PHA+Jm5ic3A7Jm5ic3A7IHByaXZhdGUgZmlu YWwgRGF0YVN0cmVhbSZsdDtBbGVydCZndDsgYWxlcnREYXRhID0gRGF0YVNvdXJjZS5jcmVhdGVT dHJlYW0oKTs8L3A+PHA+Jm5ic3A7Jm5ic3A7IC8vIGdldHRlcnMgYW5kIHNldHRlcnM8L3A+PHA+ fTwvcD48cD5gYGA8L3A+PHA+PGJyPjwvcD48cD48YnI+PC9wPjxwPioqUnVsZXMqKiBhcmUgZGVm aW5lZCBpbiBEUkwgZmlsZXMgYXMgdXN1YWwsIGV4Y2VwdCB0aGF0IHlvdSBoYXZlIG5vdyB0byBp bmRpY2F0ZSB0aGVpciAqKnVuaXQqKiBhdCB0aGUgdG9wIG9mIHRoZSBmaWxlLiBGb3IgaW5zdGFu Y2UgeW91IG1heSBkZWNsYXJlIHRoZSBkYXRhIGRlZmluaXRpb24gZm9yIGBBbGVydGluZ1NlcnZp Y2VgIGFzIGZvbGxvd3M6IDwvcD48cD48YnI+PC9wPjxwPmBgYGphdmE8L3A+PHA+cGFja2FnZSBj b20uYWNtZTs8L3A+PHA+dW5pdCBBbGVydGluZ1NlcnZpY2U7PC9wPjxwPnJ1bGUgSW5jb21pbmdF dmVudCB3aGVuPC9wPjxwPiZuYnNwOyZuYnNwOyAvLyBtYXRjaGVzIHdoZW4gYSB0ZW1wZXJhdHVy ZSBoaWdoZXIgdGhhbiAzMCDCsEMgaXMgcmVnaXN0ZXJlZCAoT09QYXRoIHN5bnRheCk8L3A+PHA+ Jm5ic3A7Jm5ic3A7ICRlIDogL2V2ZW50RGF0YSBbIHR5cGUgPT0gInRlbXBlcmF0dXJlIiwgdmFs dWUgJmd0Oz0gMzAgXSA8L3A+PHA+dGhlbjwvcD48cD4mbmJzcDsmbmJzcDsgU3lzdGVtLm91dC5w cmludGxuKCJpbmNvbWluZyBldmVudDogIisgJGUuZ2V0TWVzc2FnZSgpKTs8L3A+PHA+Jm5ic3A7 Jm5ic3A7IGFsZXJ0RGF0YS5hcHBlbmQoIG5ldyBBbGVydCggIndhcm5pbmciLCAiVGVtcGVyYXR1 cmUgaXMgdG9vIGhpZ2giICkgKTs8L3A+PHA+ZW5kPC9wPjxwPmBgYDwvcD48cD48YnI+PC9wPjxw PkFzIHlvdSBjYW4gc2VlLCBydWxlcyBtYXkgbWF0Y2ggYWdhaW5zdCBvciBpbnNlcnQgdG8gdGhl IGdpdmVuIGRhdGEgc291cmNlcy48L3A+PHA+PGJyPjwvcD48cD4qKlF1ZXJpZXMqKiBhcmUgZGVm aW5lZCBpbiBEUkwgZmlsZXMgbGlrZSBydWxlcywgYW5kIGJlbG9uZyB0byBhIHVuaXQsIHRvby4g PC9wPjxwPklmIHlvdSBkZWNsYXJlIGF0IGxlYXN0IG9uZSBxdWVyeSwgeW91IHdpbGwgZ2V0ICoq YSBSRVNUIGVuZHBvaW50IGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZvciBmcmVlKiouIDwvcD48 cD5Gb3IgaW5zdGFuY2U6PC9wPjxwPjxicj48L3A+PHA+PGJyPjwvcD48cD5gYGBqYXZhPC9wPjxw PnF1ZXJ5IFdhcm5pbmdzPC9wPjxwPiZuYnNwOyZuYnNwOyBhbGVydHM6IC9hbGVydERhdGEgWyBz ZXZlcml0eSA9PSAid2FybmluZyIgXTwvcD48cD5lbmQ8L3A+PHA+YGBgPC9wPjxwPjxicj48L3A+ PHA+d2lsbCBnZW5lcmF0ZSB0aGUgUkVTVCBlbmRwb2ludCBgL3dhcm5pbmdzYCB0aGF0IHlvdSB3 aWxsIGJlIGFibGUgdG8gaW52b2tlIGJ5IFBPU1QtaW5nIHRvIGl0IGFzIGZvbGxvd3M6PC9wPjxw Pjxicj48L3A+PHA+PGJyPjwvcD48cD5gYGBzaDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsgJCBj dXJsIC1YIFBPU1QgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLUggJ0FjY2VwdDogYXBwbGljYXRpb24vanNvbicgXDwv cD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsmbmJzcDsgLUggJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXDwvcD48cD4mbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsg LWQgJ3sgImV2ZW50RGF0YSI6IFsgeyAidHlwZSI6ICJ0ZW1wZXJhdHVyZSIsICJ2YWx1ZSIgOiA0 MCB9IF0gfScgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsgaHR0cDovL2xvY2FsaG9zdDo4MDgwL3dhcm5pbmdzPC9wPjxw PmBgYDwvcD48cD48YnI+PC9wPjxwPlRoaXMgd2lsbCBnZW5lcmF0ZSB0aGUgcmVzcG9uc2U6PC9w PjxwPjxicj48L3A+PHA+YGBganNvbjwvcD48cD5bIHsgInNldmVyaXR5IjogIndhcm5pbmciLCAi bWVzc2FnZSIgOiAiVGVtcGVyYXR1cmUgaXMgdG9vIGhpZ2giIH0gXTwvcD48cD5gYGA8L3A+PHA+ PGJyPjwvcD48cD5UaGUgSmF2YS1iYXNlZCBkYXRhIGRlZmluaXRpb24gaXMgdmVyeSBmYW1pbGlh ciB0byBwcm9ncmFtbWVycywgYnV0LCBmcm9tIGVhcmx5IHVzZXIgZmVlZGJhY2ssICp3ZSBkZWNp ZGVkIHRvIHByb3ZpZGUgdHdvIGFsdGVybmF0aXZlIG1ldGhvZHMgdG8gZGVjbGFyZSBhIHJ1bGUg dW5pdCouIFdlIGFyZSBwdWJsaXNoaW5nIHRoaXMgYmxvZyBwb3N0IHRvIGdhdGhlciBtb3JlIHVz ZXIgZmVlZGJhY2shPC9wPjxwPjxicj48L3A+PHA+IyMgVHlwZSBEZWNsYXJhdGlvbjwvcD48cD48 YnI+PC9wPjxwPlRoZSAqdHlwZSBkZWNsYXJhdGlvbiogaXMgdGhlIERSTCBmZWF0dXJlIHRvIGRl Y2xhcmUgSmF2YS1jb21wYXRpYmxlIHR5cGVzLDwvcD48cD5pbiBhIEphdmEtYWdub3N0aWMgd2F5 LiBJbiB0aGUgNyBzZXJpZXMsIHVzZXJzIG1heSBkZWNsYXJlIHR5cGVzIHdpdGggdGhlIHN5bnRh eDo8L3A+PHA+PGJyPjwvcD48cD5gYGBqYXZhPC9wPjxwPnBhY2thZ2UgY29tLmFjbWU7PC9wPjxw Pjxicj48L3A+PHA+ZGVjbGFyZSBFdmVudDwvcD48cD4mbmJzcDsmbmJzcDsgdHlwZTombmJzcDsg U3RyaW5nPC9wPjxwPiZuYnNwOyZuYnNwOyB2YWx1ZTogaW50PC9wPjxwPmVuZDwvcD48cD48YnI+ PC9wPjxwPmRlY2xhcmUgQWxlcnQ8L3A+PHA+Jm5ic3A7IHNldmVyaXR5OiBTdHJpbmc8L3A+PHA+ Jm5ic3A7IG1lc3NhZ2U6Jm5ic3A7IFN0cmluZzwvcD48cD5lbmQ8L3A+PHA+YGBgPC9wPjxwPjxi cj48L3A+PHA+VGhpcyBtYWtlcyB0aGUgRFJMIGNvbXBsZXRlbHkgc2VsZi1jb250YWluZWQ6IGVu dGl0aWVzIGFuZCBydWxlcyBtYXkgYmUgYWxsIGRlZmluZWQgdXNpbmcgRFJMLiBIb3dldmVyLCB0 aGV5IGhhdmUgZmV3IGxpbWl0YXRpb25zOyBmb3IgaW5zdGFuY2UsPC9wPjxwPnRoZXkgZG8gbm90 IHN1cHBvcnQgaW1wbGVtZW50aW5nIGludGVyZmFjZXMgYW5kIHRoZXkgZG8gbm90IHN1cHBvcnQg Z2VuZXJpYyB0eXBlIGZpZWxkcy4gSW4gb3RoZXIgd29yZHMsIHRoZSBmb2xsb3dpbmcgZGVjbGFy YXRpb24sIHVzZWQgdG8gYmUgc3ludGFjdGljYWxseSBpbnZhbGlkOjwvcD48cD48YnI+PC9wPjxw PmBgYGphdmE8L3A+PHA+cGFja2FnZSBjb20uYWNtZTs8L3A+PHA+ZGVjbGFyZSBBbGVydGluZ1Nl cnZpY2UgZXh0ZW5kcyBSdWxlVW5pdERhdGE8L3A+PHA+Jm5ic3A7Jm5ic3A7IGV2ZW50RGF0YTog RGF0YVN0cmVhbSZsdDtFdmVudCZndDs8L3A+PHA+Jm5ic3A7Jm5ic3A7IGFsZXJ0RGF0YTogRGF0 YVN0cmVhbSZsdDtBbGVydCZndDs8L3A+PHA+ZW5kPC9wPjxwPmBgYDwvcD48cD48YnI+PC9wPjxw PkluIHZlcnNpb24gMC44LjAsIHdlIGFyZSBsaWZ0aW5nIHRoZXNlIGxpbWl0YXRpb25zOiB3ZSBh bGxvdyBsaW1pdGVkIGluaGVyaXRhbmNlIGZvciBpbnRlcmZhY2VzIChvbmx5IG9uZSBpcyBhbGxv d2VkIGZvciBub3cpIGFuZCBnZW5lcmljIHR5cGUgZGVjbGFyYXRpb24gZm9yIGZpZWxkcy4gV2l0 aCB0aGVzZSBuZXcgZmVhdHVyZXMsIHRoZSBmb2xsb3dpbmcgcGllY2Ugb2YgY29kZSBiZWNvbWVz IHZhbGlkIERSTC48L3A+PHA+PGJyPjwvcD48cD5Mb25nIHN0b3J5IHNob3J0OiAqKnlvdSBhcmUg bm93IGFibGUgdG8gZGVjbGFyZWQgYSBmdWxsIG1pY3Jvc2VydmljZTwvcD48cD5mcm9tIGEgc2lu Z2xlIERSTCoqLjwvcD48cD48YnI+PC9wPjxwPkJvb3RzdHJhcCB5b3VyIEtvZ2l0byBzZXJ2aWNl IHdpdGggdGhlIGFyY2hldHlwZTo8L3A+PHA+PGJyPjwvcD48cD5gYGBzaDwvcD48cD4mbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgbXZuIGFyY2hldHlwZTpnZW5lcmF0ZSBcPC9wPjxwPiZu YnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyAtRGFyY2hldHlw ZUdyb3VwSWQ9b3JnLmtpZS5rb2dpdG8gXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLURhcmNoZXR5cGVBcnRpZmFjdElkPWtvZ2l0by1xdWFy a3VzLWFyY2hldHlwZSBcPC9wPjxwPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNw OyZuYnNwOyZuYnNwOyAtRGFyY2hldHlwZVZlcnNpb249MC44LjAgXDwvcD48cD4mbmJzcDsmbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLURncm91cElkPWNvbS5hY21l IFw8L3A+PHA+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7 IC1EYXJ0aWZhY3RJZD1zYW1wbGUta29naXRvPC9wPjxwPmBgYDwvcD48cD48YnI+PC9wPjxwPkF0 IHRoZSBtb21lbnQsIG5vIFF1YXJrdXMgdmVyc2lvbiBidW5kbGVzIEtvZ2l0byAwLjguMDsgb3Ro ZXJ3aXNlLCB5b3Ugd291bGQgYmUgYWJsZSB0byB1c2UgYG12biBpby5xdWFya3VzOnF1YXJrdXMt bWF2ZW4tcGx1Z2luOmNyZWF0ZWAgaW5zdGVhZC48L3A+PHA+PGJyPjwvcD48cD5Ob3csIGNsZWFy IHRoZSBjb250ZW50cyBvZiBgc3JjL21haW5gIGFuZCB0aGVuLCBkcm9wIHRoaXMgRFJMIHRvIGBz cmMvbWFpbi9yZXNvdXJjZXMvY29tL2FjbWVgIGZvbGRlciBpbnN0ZWFkOjwvcD48cD48YnI+PC9w PjxwPmBgYGphdmE8L3A+PHA+cGFja2FnZSBjb20uYWNtZTs8L3A+PHA+dW5pdCBBbGVydGluZ1Nl cnZpY2U7PC9wPjxwPjxicj48L3A+PHA+aW1wb3J0IG9yZy5raWUua29naXRvLnJ1bGVzLkRhdGFT dHJlYW07PC9wPjxwPmltcG9ydCBvcmcua2llLmtvZ2l0by5ydWxlcy5SdWxlVW5pdERhdGE7PC9w PjxwPjxicj48L3A+PHA+ZGVjbGFyZSBFdmVudDwvcD48cD4mbmJzcDsmbmJzcDsgdHlwZTombmJz cDsgU3RyaW5nPC9wPjxwPiZuYnNwOyZuYnNwOyB2YWx1ZTogaW50PC9wPjxwPmVuZDwvcD48cD48 YnI+PC9wPjxwPmRlY2xhcmUgQWxlcnQ8L3A+PHA+Jm5ic3A7IHNldmVyaXR5OiBTdHJpbmc8L3A+ PHA+Jm5ic3A7IG1lc3NhZ2U6Jm5ic3A7IFN0cmluZzwvcD48cD5lbmQ8L3A+PHA+PGJyPjwvcD48 cD5kZWNsYXJlIEFsZXJ0aW5nU2VydmljZSBleHRlbmRzIFJ1bGVVbml0RGF0YTwvcD48cD4mbmJz cDsmbmJzcDsgZXZlbnREYXRhOiBEYXRhU3RyZWFtJmx0O0V2ZW50Jmd0OzwvcD48cD4mbmJzcDsm bmJzcDsgYWxlcnREYXRhOiBEYXRhU3RyZWFtJmx0O0FsZXJ0Jmd0OzwvcD48cD5lbmQ8L3A+PHA+ PGJyPjwvcD48cD5ydWxlIEluY29taW5nRXZlbnQgd2hlbjwvcD48cD4mbmJzcDsmbmJzcDsgLy8g bWF0Y2hlcyB3aGVuIGEgdGVtcGVyYXR1cmUgaGlnaGVyIHRoYW4gMzAgwrBDIGlzIHJlZ2lzdGVy ZWQgKE9PUGF0aCBzeW50YXgpPC9wPjxwPiZuYnNwOyZuYnNwOyAkZSA6IC9ldmVudERhdGEgWyB0 eXBlID09ICJ0ZW1wZXJhdHVyZSIsIHZhbHVlICZndDs9IDMwIF0gPC9wPjxwPnRoZW48L3A+PHA+ Jm5ic3A7Jm5ic3A7IFN5c3RlbS5vdXQucHJpbnRsbigiaW5jb21pbmcgZXZlbnQ6ICIrICRlLmdl dE1lc3NhZ2UoKSk7PC9wPjxwPiZuYnNwOyZuYnNwOyBhbGVydERhdGEuYXBwZW5kKCBuZXcgQWxl cnQoICJ3YXJuaW5nIiwgIlRlbXBlcmF0dXJlIGlzIHRvbyBoaWdoOiAiICsgJGUgKSApOzwvcD48 cD5lbmQ8L3A+PHA+PGJyPjwvcD48cD5xdWVyeSBXYXJuaW5nczwvcD48cD4mbmJzcDsmbmJzcDsg YWxlcnRzOiAvYWxlcnREYXRhIFsgc2V2ZXJpdHkgPT0gIndhcm5pbmciIF08L3A+PHA+ZW5kPC9w PjxwPmBgYDwvcD48cD48YnI+PC9wPjxwPk5vdyBmaXJlIHVwIHRoZSBRdWFya3VzIHNlcnZpY2Ug aW4gZGV2ZXZlbG9wZXIgbW9kZSB3aXRoOjwvcD48cD48YnI+PC9wPjxwPmBgYHNoPC9wPjxwPiZu YnNwOyZuYnNwOyZuYnNwOyAkIG12biBjb21waWxlIHF1YXJrdXM6ZGV2PC9wPjxwPmBgYDwvcD48 cD48YnI+PC9wPjxwPlRoZXJlIHlvdSBnbywgeW91IGFyZSBub3cgcmVhZHkgdG8gYGN1cmxgIHlv dXIgc2VydmljZTo8L3A+PHA+PGJyPjwvcD48cD5gYGBzaDwvcD48cD4mbmJzcDsmbmJzcDsmbmJz cDsgJCBjdXJsIC1YIFBPU1QgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLUggJ0FjY2VwdDogYXBwbGljYXRpb24vanNv bicgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsmbmJzcDsmbmJzcDsgLUggJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXDwvcD48 cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsgLWQgJ3sgImV2ZW50RGF0YSI6IFsgeyAidHlwZSI6ICJ0ZW1wZXJhdHVyZSIsICJ2YWx1 ZSIgOiA0MCB9IF0gfScgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgaHR0cDovL2xvY2FsaG9zdDo4MDgwL3dhcm5pbmdz PC9wPjxwPmBgYDwvcD48cD48YnI+PC9wPjxwPiMjIFdvcmtmbG93IEludGVncmF0aW9uPC9wPjxw Pjxicj48L3A+PHA+QW5vdGhlciB3YXkgdG8gZXhwb3NlIGEgcnVsZS1iYXNlZCBzZXJ2aWNlIGlz IHRocm91Z2ggYSAqd29ya2Zsb3cqLjwvcD48cD48YnI+PC9wPjxwPkEgKndvcmtmbG93KiAoc29t ZXRpbWVzIGNhbGxlZCBhICJidXNpbmVzcyBwcm9jZXNzIikgZGVzY3JpYmVzIGEgc2VxdWVuY2Ug b2YgPC9wPjxwPnN0ZXBzIGluIGEgZGlhZ3JhbSBhbmQgaXQgdXN1YWxseSBkZWNsYXJlcyAqdmFy aWFibGVzKjogZGF0YSBob2xkZXJzIGZvcjwvcD48cD52YWx1ZXMgdGhhdCBhcmUgbWFuaXB1bGF0 ZWQgaW4gdGhlIGV4ZWN1dGlvbi4gVGhlIGRhdGEgdHlwZSBvZiBvbmUgc3VjaCB2YXJpYWJsZTwv cD48cD5tYXkgYmUgKmFueXRoaW5nKjogeW91IG1heSB1c2UgSmF2YSBjbGFzc2VzLCBidXQsIGlu IHRoaXMgZXhhbXBsZSwgd2Ugd2lsbDwvcD48cD51c2UgYWdhaW4gb3VyIGRlY2xhcmVkIGRhdGEg dHlwZXMuIDwvcD48cD48YnI+PC9wPjxwPmBgYGphdmE8L3A+PHA+cGFja2FnZSBjb20uYWNtZTs8 L3A+PHA+PGJyPjwvcD48cD5kZWNsYXJlIEV2ZW50PC9wPjxwPiZuYnNwOyZuYnNwOyB0eXBlOiZu YnNwOyBTdHJpbmc8L3A+PHA+Jm5ic3A7Jm5ic3A7IHZhbHVlOiBpbnQ8L3A+PHA+ZW5kPC9wPjxw Pjxicj48L3A+PHA+ZGVjbGFyZSBBbGVydDwvcD48cD4mbmJzcDsgc2V2ZXJpdHk6IFN0cmluZzwv cD48cD4mbmJzcDsgbWVzc2FnZTombmJzcDsgU3RyaW5nPC9wPjxwPmVuZDwvcD48cD5gYGA8L3A+ PHA+PGJyPjwvcD48cD5MZXQgdXMgY2FsbCB0aGlzIHdvcmtmbG93IGBjb20uYWNtZS5BbGVydGlu Z1dvcmtmbG93YCwgYW5kIGRlY2xhcmUgdGhlIHZhcmlhYmxlcyBgZXZlbnREYXRhYCBhbmQgYGFs ZXJ0RGF0YWA6PC9wPjxwPjxicj48L3A+PHA+IVt3b3JrZmxvd10oaHR0cHM6Ly9yYXcuZ2l0aHVi dXNlcmNvbnRlbnQuY29tL2V2YWNjaGkva29naXRvLXJ1bGVzLWV4YW1wbGUvbWFzdGVyL2ltZ3Mv dmFyaWFibGVzLnBuZyk8L3A+PHA+PGJyPjwvcD48cD48YnI+PC9wPjxwPkEgd29ya2Zsb3cgdGhh dCBpbmNsdWRlcyBhICpydWxlIHRhc2sqIG1heSBza2lwIHRoZSBydWxlIHVuaXQgZGF0YSAqZGVj bGFyYXRpb24qIGFsdG9nZXRoZXI6IGluIHRoaXMgY2FzZSB0aGUgcnVsZSB1bml0IGlzIGluZmVy cmVkIGRpcmVjdGx5IHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIHByb2Nlc3M6IGVhY2ggdmFyaWFibGUg d2lsbCBiZSAqKmluc2VydGVkIGludG8gZGF0YSBzb3VyY2Ugb2YgdGhlIHNhbWUgbmFtZSoqLjwv cD48cD48YnI+PC9wPjxwPiFbd29ya2Zsb3ddKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50 LmNvbS9ldmFjY2hpL2tvZ2l0by1ydWxlcy1leGFtcGxlL21hc3Rlci9pbWdzL3dvcmtmbG93LnBu Zyk8L3A+PHA+PGJyPjwvcD48cD5UaGUgKm5hbWUqIG9mIHRoZSB1bml0IGlzIGRlY2xhcmVkIGJ5 IHRoZSBwcm9jZXNzLCB1c2luZyB0aGUgc3ludGF4IGB1bml0OmNvbS5hY21lLkFsZXJ0aW5nU2Vy dmljZWAuPC9wPjxwPllvdSBhcmUgc3RpbGwgZnJlZSB0byBleHBsaWNpdGx5IGRlY2xhcmUgdGhl IHVuaXQgYGNvbS5hY21lLkFsZXJ0aW5nU2VydmljZWA7IGluIHRoYXQgY2FzZSwgdGhlIHByb2Nl c3Mgd2lsbCB0aGUgZGVjbGFyYXRpb24gdGhhdCB5b3UgaGF2ZSBoYW5kLWNvZGVkLjwvcD48cD48 YnI+PC9wPjxwPk5vdGU6IFlvdSBtYXkgaGF2ZSBub3RpY2VkIHRoYXQgd2UgYXJlIHVzaW5nIHRo ZSAiUnVsZSBGbG93IEdyb3VwIiBmaWVsZC4gV2Ugd2lsbCBhIG1vcmUgZXhwbGljaXQgc3VwcG9y dCB0byB0aGUgVUkgaW4gdGhlIGZ1dHVyZS48L3A+PHA+PGJyPjwvcD48cD5Cb290c3RyYXAgeW91 ciBLb2dpdG8gc2VydmljZSB3aXRoIHRoZSBhcmNoZXR5cGU6PC9wPjxwPjxicj48L3A+PHA+YGBg c2g8L3A+PHA+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IG12biBhcmNoZXR5cGU6Z2Vu ZXJhdGUgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsgLURhcmNoZXR5cGVHcm91cElkPW9yZy5raWUua29naXRvIFw8L3A+PHA+Jm5ic3A7Jm5i c3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IC1EYXJjaGV0eXBlQXJ0aWZh Y3RJZD1rb2dpdG8tcXVhcmt1cy1hcmNoZXR5cGUgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLURhcmNoZXR5cGVWZXJzaW9uPTAuOC4wIFw8 L3A+PHA+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IC1E Z3JvdXBJZD1jb20uYWNtZSBcPC9wPjxwPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZu YnNwOyZuYnNwOyZuYnNwOyAtRGFydGlmYWN0SWQ9c2FtcGxlLWtvZ2l0bzwvcD48cD5gYGA8L3A+ PHA+PGJyPjwvcD48cD4qKkNhdmVhdCoqLiBTdXBwb3J0IGZvciB0aGlzIGZlYXR1cmUgaXMgZXhw ZXJpbWVudGFsLCBzbyBpdCBtYXkgbm90IHdvcmsgc2VhbWxlc3NseTwvcD48cD53aXRoIFF1YXJr dXMgaG90IGNvZGUgcmVsb2FkOyB3ZSBhbHNvIG5lZWQgdGhlIGZvbGxvd2luZyBleHRyYSBzdGVw IHRvIGVuYWJsZSBpdCwgYnV0IHRoaXMgd2lsbCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS48L3A+PHA+ PGJyPjwvcD48cD5VcGRhdGUgeW91ciBgcG9tLnhtbGAgd2l0aCB0aGUgZm9sbG93aW5nIHBsdWdp biBkZWNsYXJhdGlvbjo8L3A+PHA+PGJyPjwvcD48cD5gYGB4bWw8L3A+PHA+Jm5ic3A7ICZsdDti dWlsZCZndDs8L3A+PHA+Jm5ic3A7Jm5ic3A7Jm5ic3A7ICZsdDtwbHVnaW5zJmd0OzwvcD48cD4m bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgJmx0O3BsdWdpbiZndDs8L3A+PHA+Jm5ic3A7 Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7ICZsdDtncm91cElkJmd0O29yZy5r aWUua29naXRvJmx0Oy9ncm91cElkJmd0OzwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsgJmx0O2FydGlmYWN0SWQmZ3Q7a29naXRvLW1hdmVuLXBsdWdpbiZs dDsvYXJ0aWZhY3RJZCZndDs8L3A+PHA+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5i c3A7Jm5ic3A7ICZsdDt2ZXJzaW9uJmd0OzAuOC4wJmx0Oy92ZXJzaW9uJmd0OzwvcD48cD4mbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgJmx0O2V4ZWN1dGlvbnMmZ3Q7 PC9wPjxwPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZu YnNwOyAmbHQ7ZXhlY3V0aW9uJmd0OzwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgJmx0O2dvYWxzJmd0OzwvcD48 cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgJmx0O2dvYWwmZ3Q7Z2VuZXJhdGVEZWNsYXJlZFR5cGVz Jmx0Oy9nb2FsJmd0OzwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgJmx0Oy9nb2FscyZndDs8L3A+PHA+Jm5ic3A7 Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7ICZsdDsvZXhl Y3V0aW9uJmd0OzwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsgJmx0Oy9leGVjdXRpb25zJmd0OzwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsgJmx0Oy9wbHVnaW4mZ3Q7PC9wPjxwPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyAu Li48L3A+PHA+Jm5ic3A7Jm5ic3A7Jm5ic3A7ICZsdDsvcGx1Z2lucyZndDs8L3A+PHA+Jm5ic3A7 Jm5ic3A7ICZsdDsvYnVpbGQmZ3Q7PC9wPjxwPjxicj48L3A+PHA+YGBgPC9wPjxwPjxicj48L3A+ PHA+WW91IGNhbiBub3cgY2xlYXIgdGhlIGNvbnRlbnRzIG9mIGBzcmMvbWFpbmAsIGFuZCB0aGVu IGRyb3AgdGhlIHByb2Nlc3MgYW5kIHRoZSBmb2xsb3dpbmcgRFJMIHRvIGBzcmMvbWFpbi9yZXNv dXJjZXMvY29tL2FjbWVgIGZvbGRlci48L3A+PHA+PGJyPjwvcD48cD5gYGBqYXZhPC9wPjxwPnBh Y2thZ2UgY29tLmFjbWU7PC9wPjxwPnVuaXQgQWxlcnRpbmdTZXJ2aWNlOzwvcD48cD48YnI+PC9w PjxwPmltcG9ydCBvcmcua2llLmtvZ2l0by5ydWxlcy5EYXRhU3RyZWFtOzwvcD48cD5pbXBvcnQg b3JnLmtpZS5rb2dpdG8ucnVsZXMuUnVsZVVuaXREYXRhOyA8L3A+PHA+PGJyPjwvcD48cD5kZWNs YXJlIEV2ZW50PC9wPjxwPiZuYnNwOyZuYnNwOyB0eXBlOiZuYnNwOyBTdHJpbmc8L3A+PHA+Jm5i c3A7Jm5ic3A7IHZhbHVlOiBpbnQ8L3A+PHA+ZW5kPC9wPjxwPjxicj48L3A+PHA+ZGVjbGFyZSBB bGVydDwvcD48cD4mbmJzcDsgc2V2ZXJpdHk6IFN0cmluZzwvcD48cD4mbmJzcDsgbWVzc2FnZTom bmJzcDsgU3RyaW5nPC9wPjxwPmVuZDwvcD48cD48YnI+PC9wPjxwPjxicj48L3A+PHA+cnVsZSBJ bmNvbWluZ0V2ZW50IHdoZW48L3A+PHA+Jm5ic3A7Jm5ic3A7IC8vIG1hdGNoZXMgd2hlbiBhIHRl bXBlcmF0dXJlIGhpZ2hlciB0aGFuIDMwIMKwQyBpcyByZWdpc3RlcmVkIChPT1BhdGggc3ludGF4 KTwvcD48cD4mbmJzcDsmbmJzcDsgJGUgOiAvZXZlbnREYXRhIFsgdHlwZSA9PSAidGVtcGVyYXR1 cmUiLCB2YWx1ZSAmZ3Q7PSAzMCBdPC9wPjxwPnRoZW48L3A+PHA+Jm5ic3A7Jm5ic3A7IFN5c3Rl bS5vdXQucHJpbnRsbigiaW5jb21pbmcgZXZlbnQ6ICIrICRlLmdldE1lc3NhZ2UoKSk7PC9wPjxw PiZuYnNwOyZuYnNwOyBhbGVydERhdGEuc2V0KCBuZXcgQWxlcnQoICJ3YXJuaW5nIiwmbmJzcDsg IlRlbXBlcmF0dXJlIGlzIHRvbyBoaWdoOiAiICsgJGUgKSApOzwvcD48cD5lbmQ8L3A+PHA+YGBg PC9wPjxwPjxicj48L3A+PHA+QXMgeW91IG1heSBoYXZlIG5vdGljZWQsIHlvdSBhcmUgbm90IHJl cXVpcmVkIHRvIGRlY2xhcmUgYSBxdWVyeSBleHBsaWNpdGx5OiB0aGUgcHJvY2VzcyB3aWxsIGRp c3BsYXk8L3A+PHA+dGhlIGNvbnRlbnRzIG9mIHRoZSB2YXJpYWJsZXMgYXMgYSByZXNwb25zZTsg aXQgd2lsbCBnZW5lcmF0ZSB0aGUgZW5kcG9pbnQgYC9BbGVydGluZ1dvcmtmbG93YCwgYW5kIGl0 IGFjY2VwdCBhIGBQT1NUYCByZXF1ZXN0IG9mIHRoZSBmb2xsb3dpbmcgZm9ybTo8L3A+PHA+PGJy PjwvcD48cD5gYGBzaDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsgJCBjdXJsIC1YIFBPU1QgXDwv cD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsmbmJzcDsgLUggJ0FjY2VwdDogYXBwbGljYXRpb24vanNvbicgXDwvcD48cD4mbmJzcDsmbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLUggJ0Nv bnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLWQgJ3sgImV2ZW50RGF0 YSI6IHsgInR5cGUiOiAidGVtcGVyYXR1cmUiLCAidmFsdWUiIDogNDAgfSB9JyBcPC9wPjxwPiZu YnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNw OyBodHRwOi8vbG9jYWxob3N0OjgwODAvQWxlcnRpbmdXb3JrZmxvdzwvcD48cD5gYGA8L3A+PHA+ PGJyPjwvcD48cD5UaGUgcmVwbHkgd2lsbCBiZTo8L3A+PHA+PGJyPjwvcD48cD48YnI+PC9wPjxw PmBgYGpzb248L3A+PHA+ezwvcD48cD4mbmJzcDsgImlkIjogLi4uLDwvcD48cD4mbmJzcDsgImV2 ZW50RGF0YSI6IHs8L3A+PHA+Jm5ic3A7Jm5ic3A7Jm5ic3A7ICJ0eXBlIjogInRlbXBlcmF0dXJl Iiw8L3A+PHA+Jm5ic3A7Jm5ic3A7Jm5ic3A7ICJ2YWx1ZSI6IDEwMDwvcD48cD4mbmJzcDsgfSw8 L3A+PHA+Jm5ic3A7ICJhbGVydERhdGEiOiB7PC9wPjxwPiZuYnNwOyZuYnNwOyZuYnNwOyAic2V2 ZXJpdHkiOiAid2FybmluZyIsPC9wPjxwPiZuYnNwOyZuYnNwOyZuYnNwOyAibWVzc2FnZSI6ICJU ZW1wZXJhdHVyZSBpcyB0b28gaGlnaDogRXZlbnQoIHR5cGU9dGVtcGVyYXR1cmUsIHZhbHVlPTEw MCApIjwvcD48cD4mbmJzcDsgfTwvcD48cD59PC9wPjxwPmBgYDwvcD48cD48YnI+PC9wPjxwPkhv d2V2ZXIsIGlmIHlvdSAqZG8qIGRlY2xhcmUgYSBxdWVyeSwgYSBzZXBhcmF0ZSBlbmRwb2ludCB3 aWxsIGJlIGF2YWlsYWJsZSBhcyB3ZWxsLiBGb3IgaW5zdGFuY2U8L3A+PHA+aWYgeW91IGRlY2xh cmUgdGhlIHF1ZXJ5IGBXYXJuaW5nc2AgeW91IHdpbGwgc3RpbGwgYmUgYWJsZSB0byBQT1NUIHRv IGBodHRwOi8vbG9jYWxob3N0OjgwODAvd2FybmluZ3NgIGFuZCBpbnZva2UgdGhlIHJ1bGUgc2Vy dmljZSBzZXBhcmF0ZWx5PC9wPjxwPmFzIGZvbGxvd3M6PC9wPjxwPjxicj48L3A+PHA+PGJyPjwv cD48cD4mbmJzcDsmbmJzcDsmbmJzcDsgJCBjdXJsIC1YIFBPU1QgXDwvcD48cD4mbmJzcDsmbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLUggJ0Fj Y2VwdDogYXBwbGljYXRpb24vanNvbicgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsm bmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLUggJ0NvbnRlbnQtVHlwZTogYXBw bGljYXRpb24vanNvbicgXDwvcD48cD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJz cDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgLWQgJ3sgImV2ZW50RGF0YSI6IHsgInR5cGUiOiAi dGVtcGVyYXR1cmUiLCAidmFsdWUiIDogNDAgfSB9JyBcPC9wPjxwPiZuYnNwOyZuYnNwOyZuYnNw OyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyBodHRwOi8vbG9jYWxo b3N0OjgwODAvd2FybmluZ3M8L3A+PHA+PGJyPjwvcD48cD5Ob3RpY2UgdGhhdCB0aGUgcmVxdWVz dCBubyBsb25nZXIgY29udGFpbnMgYSBsaXN0IG9mIEV2ZW50cy4gVGhpcyBpcyBiZWNhdXNlIHBy b2Nlc3MgdmFyaWFibGVzIGFyZSBtYXBwZWQgdG8gc2luZ2xlIHZhbHVlcyBpbnN0ZWFkIG9mIERh dGFTdHJlYW1zLiA8L3A+PHA+PGJyPjwvcD48cD4jIyBDb25jbHVzaW9uPC9wPjxwPjxicj48L3A+ PHA+V2UgaGF2ZSBnaXZlbiBhIHNuZWFrIHBlZWsgb24gdGhlIHdvcmsgdGhhdCB3ZSBhcmUgZG9p bmcgdG8gaW1wcm92ZSB0aGUgZ2V0dGluZyBzdGFydGVkIGV4cGVyaWVuY2Ugd2l0aCBydWxlcyBh bmQgcHJvY2Vzc2VzIGluIEtvZ2l0by4gV2l0aCB0aGVzZSBjaGFuZ2VzLCB3ZSBob3BlIHRvIGhh dmUgcHJvdmlkZWQgYSBtb3JlIHN0cmVhbWxpbmVkIHdheSB0byBkZWZpbmUga25vd2xlZGdlLWJh c2VkIHNlcnZpY2VzLiBEZXZlbG9wZXJzIHdpbGwgYWx3YXlzIGFibGUgdG8gYmUgbW9yZSBleHBs aWNpdCBhYm91dCB0aGUgZGF0YSB0aGV5IHdhbnQgdG8gcHJvY2VzcywgYnkgb3B0aW5nLWluIHRv IHdyaXRpbmcgSmF2YTsgYnV0IGlmIHRoZXkgd2FudCwgdGhleSBjYW4gZW1icmFjZSBhIGZ1bGx5 IERTTC1jZW50cmljIGRldmVsb3BtZW50IHdvcmtmbG93LjwvcD48cD48YnI+PC9wPjxwPjxicj48 L3A+PHA+X0ZvciB0aGUgbGF6aWVzLCBleGFtcGxlcyBhcmUgYXZhaWxhYmxlIGF0IGh0dHBzOi8v Z2l0aHViLmNvbS9ldmFjY2hpL2tvZ2l0by1ydWxlcy1leGFtcGxlL3RyZWUvbWFzdGVyL2NvZGUg SGF2ZSBmdW4hXzwvcD4="&gt;​&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=QYMFG7xpNtY:-W8wKdTUu8Y:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=QYMFG7xpNtY:-W8wKdTUu8Y:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=QYMFG7xpNtY:-W8wKdTUu8Y:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=QYMFG7xpNtY:-W8wKdTUu8Y:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=QYMFG7xpNtY:-W8wKdTUu8Y:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=QYMFG7xpNtY:-W8wKdTUu8Y:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=QYMFG7xpNtY:-W8wKdTUu8Y:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=QYMFG7xpNtY:-W8wKdTUu8Y:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=QYMFG7xpNtY:-W8wKdTUu8Y:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=QYMFG7xpNtY:-W8wKdTUu8Y:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/QYMFG7xpNtY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2FD1UVc-tuQ" height="1" width="1" alt=""/&gt;</content><summary>Welcome to another episode of this blog series on the Kogito initiative and our efforts to bring Drools to the cloud. The goal of these posts is to gather early user feedback on the features we are delivering to Kogito. In this post we present two new ways to realize a complete intelligent service: self-contained rule services integrated intelligent workflows with rule tasks Units of Execution in ...</summary><dc:creator>Edoardo Vacchi</dc:creator><dc:date>2020-03-10T09:00:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/QYMFG7xpNtY/kogito-ergo-rules-from-knowledge-to.html</feedburner:origLink></entry><entry><title>How to run containerized workloads securely and at scale with Fedora CoreOS</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sOUH9VQ9v7k/" /><category term="change management" scheme="searchisko:content:tags" /><category term="containerized workflow" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="Fedora CoreOS" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="NoOps" scheme="searchisko:content:tags" /><category term="OpenShift 4" scheme="searchisko:content:tags" /><author><name>Gianni Salinetti</name></author><id>searchisko:content:id:jbossorg_blog-how_to_run_containerized_workloads_securely_and_at_scale_with_fedora_coreos</id><updated>2020-03-10T07:00:45Z</updated><published>2020-03-10T07:00:45Z</published><content type="html">&lt;p&gt;The history of container-optimized operating systems is short but filled by a variety of proposals with different degrees of success. Along with &lt;a href="https://coreos.com/" target="_blank" rel="noopener noreferrer"&gt;CoreOS Container Linux&lt;/a&gt;, Red Hat sponsored the &lt;a href="https://www.projectatomic.io" target="_blank" rel="noopener noreferrer"&gt;Project Atomic&lt;/a&gt; community, which is today the umbrella that holds many projects, from Fedora/CentOS/&lt;a href="https://www.redhat.com/en/resources/enterprise-linux-atomic-host-datasheet" target="_blank" rel="noopener noreferrer"&gt;Red Hat Enterprise Linux Atomic Host&lt;/a&gt; to container tools (Buildah, skopeo, and others) and &lt;a href="https://silverblue.fedoraproject.org/" target="_blank" rel="noopener noreferrer"&gt;Fedora SilverBlue&lt;/a&gt;, an immutable OS for the desktop (more on the &amp;#8220;immutable&amp;#8221; term in the next sections).&lt;/p&gt; &lt;p&gt;When Red Hat acquired the San Francisco-based company CoreOS on January 2018 new perspectives opened. Red Hat Enterprise Linux CoreOS (RHCOS) was one of the first products of this merge, becoming the base operating system in OpenShift 4. Since Red Hat is focused on open source software, always striving to create and feed upstream communities, the Fedora ecosystem was the natural environment for the RHCOS-related upstream, &lt;a href="https://getfedora.org/en/coreos/" target="_blank" rel="noopener noreferrer"&gt;Fedora CoreOS&lt;/a&gt;. Fedora CoreOS is based on the best parts of CoreOS Container Linux and Atomic Host, merging features and tools from both.&lt;/p&gt; &lt;p&gt;In this first article, I introduce Fedora CoreOS and explain why it is so important to developers and DevOps professionals. Throughout the rest of this series, I will dive into the details of setting up, using, and managing Fedora CoreOS.&lt;/p&gt; &lt;p&gt;&lt;span id="more-683857"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Fedora CoreOS&lt;/h2&gt; &lt;p&gt;Fedora CoreOS is a minimal operating system designed for running containerized workloads securely and at scale (and so is Red Hat CoreOS), which is why the Fedora CoreOS operating system layer is kept as minimal as possible and the file system is managed atomically as an immutable image. These features provide a reliable background for running containers.&lt;/p&gt; &lt;p&gt;In Fedora CoreOS, we can run our applications as containers and we can also (optionally) install extra packages with the &lt;a href="https://github.com/projectatomic/rpm-ostree" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;rpm-ostree&lt;/code&gt;&lt;/a&gt; tool, which layers changes on top of the base image atomically, similar to how we use a Git commit to finalize the code we wrote or updated. As with Git, this behavior helps us track the changes to the file system.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href="https://github.com/projectatomic/rpm-ostree" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;rpm-ostree&lt;/code&gt;&lt;/a&gt; tool is based on the &lt;a href="https://github.com/ostreedev/ostree" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;libostree&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/rpm-software-management/libdnf" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;libdnf&lt;/code&gt;&lt;/a&gt; libraries. It combines the best features from image-system and package-system approaches to managing and upgrading a machine.&lt;/p&gt; &lt;h3&gt;What is &amp;#8220;immutable&amp;#8221; and why is it important?&lt;/h3&gt; &lt;p&gt;In everyday work we usually run containers on top of standard Linux systems, so what is the advantage of using an immutable system for our containerized applications? I strongly believe that the future of systems management (not only in cloud environments) points toward an &lt;em&gt;immutable infrastructure&lt;/em&gt; managed with a declarative approach. But, wait, what is exactly an immutable infrastructure?&lt;/p&gt; &lt;p&gt;An immutable infrastructure relies on its components not being changed after creation. If a change must be applied (like an upgrade), the whole component is replaced with its new, modified version. Consider an instance running a web server. If we need to change its configuration or add/upgrade/remove modules and are following the immutable approach, we don’t modify the running instance. Instead, we deploy a new instance with the desired changes and destroy the old version.&lt;/p&gt; &lt;p&gt;Managing systems manually (or with poorly written automation) leads to the risk of &lt;em&gt;configuration drift&lt;/em&gt;. Instead of using this method, we need systems where changes are managed &lt;em&gt;atomically&lt;/em&gt;. In computer science, an &lt;em&gt;atomic commit&lt;/em&gt; is an operation that applies a set of distinct changes as a single operation. Immutable systems are the natural extension of this scenario, giving us an atomically-managed system that applies all changes (upgrades, new packages, etc.) in a single atomic operation layered on top of the base file system. This practice produces systems that are more predictable and reliable.&lt;/p&gt; &lt;p&gt;Some find the term “immutable” strange, thinking that it could weaken system control and ownership. The immutability here has much to do with the way the machine configurations are applied, and the atomic approach defines how the file system changes are managed, which privileges a Git-like, layered approach. An example implementation of this atomic behavior is the &lt;a href="https://github.com/ostreedev/ostree" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;libostree&lt;/code&gt;&lt;/a&gt; library, which is the base foundation of the systems we will describe.&lt;/p&gt; &lt;p&gt;Libostree is a library and a set of tools, and together they provide a Git-like model for committing and downloading bootable file system trees. Libostree (or simply &lt;code&gt;ostree&lt;/code&gt;) creates layers for managing &lt;code&gt;/etc&lt;/code&gt;, user files, and boot loader configurations on top of the immutable system, which is atomically managed as a whole tree. So, we can run custom workloads on top of these base, minimal images by layering our customizations on top of them.&lt;/p&gt; &lt;p&gt;Doesn&amp;#8217;t this process sound similar to containers?&lt;/p&gt; &lt;p&gt;Besides the similarities between container images and system images, the main advantage of running containers on top of an immutable system is having a more stable, standardized, and configuration drift-free system, which provides predictable behaviors when running workloads on top of dozens or hundreds of nodes in an orchestrated environment and reduces the need for manual intervention and potential related mistakes.&lt;/p&gt; &lt;h3 id="fedora-coreos-red-hat-coreos-and-openshift-4"&gt;Fedora CoreOS, Red Hat CoreOS, and OpenShift 4&lt;/h3&gt; &lt;p&gt;The predictable and reliable nature of atomically-managed systems is a perfect scenario for systems automation that follows an immutable approach. Infrastructure-as-Code projects like &lt;a href="https://www.terraform.io/" target="_blank" rel="noopener noreferrer"&gt;Terraform&lt;/a&gt; take advantage of this management workflow. We can also use &lt;a href="https://www.ansible.com/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Ansible&lt;/a&gt; to build and deploy immutable systems starting from a minimal base image.&lt;/p&gt; &lt;p&gt;OpenShift 4 brings a new level of intelligent automation to the process with &lt;a href="https://www.openshift.com/learn/topics/operators" target="_blank" rel="noopener noreferrer"&gt;OpenShift Operators&lt;/a&gt;. Operators take the burden of managing, upgrading, and configuring systems following a &lt;em&gt;NoOps&lt;/em&gt; approach, letting DevOps professionals focus on application delivery. In OpenShift 4, the &lt;a href="https://github.com/openshift/machine-config-operator" target="_blank" rel="noopener noreferrer"&gt;Machine Config Operator&lt;/a&gt; (MCO) has a fundamental role: It manages machine configurations and updates within the cluster. The MCO starts the Machine Config Daemon (MCD) on every RHCOS node as a DaemonSet. The MCD retrieves updated configurations (MachineConfig resources) and acts to align the configuration&amp;#8217;s current state with the desired state.&lt;/p&gt; &lt;p&gt;Since Fedora CoreOS is the default operating system for &lt;a href="https://www.okd.io/" target="_blank" rel="noopener noreferrer"&gt;OKD&lt;/a&gt; 4, OpenShift 4&amp;#8217;s community upstream, learning how Fedora CoreOS works is a great help for understanding how nodes are managed inside of an OpenShift cluster.&lt;/p&gt; &lt;h2 id="getting-fedora-coreos"&gt;Getting started with Fedora CoreOS&lt;/h2&gt; &lt;p&gt;The rest of the series will use the latest Fedora CoreOS &lt;a href="https://www.qemu.org/" target="_blank" rel="noopener noreferrer"&gt;QEMU&lt;/a&gt; image as an example for installation, configuration, and management. You can &lt;a href="https://getfedora.org/en/coreos/download/" target="_blank" rel="noopener noreferrer"&gt;download this image here&lt;/a&gt; from the &lt;strong&gt;Bare Metal &amp;#38; Virtualized&lt;/strong&gt; tab. These are the basic images that can be configured at first boot using &lt;em&gt;Ignition configs&lt;/em&gt;, a boot configuration format inherited from CoreOS Linux.&lt;/p&gt; &lt;p&gt;As you can see, QEMU is not your only option. You can find other images on &lt;a href="https://getfedora.org/en/coreos/download/" target="_blank" rel="noopener noreferrer"&gt;Download Fedora CoreOS&lt;/a&gt;, in the categories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Bare metal:&lt;/strong&gt; ISO, PXE kernel and initramfs, and raw&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Cloud-launchable:&lt;/strong&gt; AMIs for AWS for different regions worldwide&lt;/li&gt; &lt;li&gt;&lt;strong&gt;For cloud Operators:&lt;/strong&gt; Alibaba Cloud and OpenStack qcow2, AWS vmdk, Azure vhd, and GCP&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Virtualized:&lt;/strong&gt; OpenStack and QEMU qcow2 and VMware ova&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are not familiar with QEMU, check out &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2020/03/06/configure-and-ru…tside-of-libvirt/" target="_blank" rel="noopener noreferrer"&gt;Configure and run a QEMU-based VM outside of libvirt with virt-manager&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Now, let us walk through the process of installing and initially configuring Fedora CoreOS, running a test container, updating its configuration, and testing the new instance.&lt;/p&gt; &lt;h3 id="ignition-configs"&gt;Creating an Ignition config with &lt;code&gt;fcct&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The underlying technology for Ignition configs is based on the &lt;a href="https://github.com/coreos/ignition/" target="_blank" rel="noopener noreferrer"&gt;Ignition&lt;/a&gt; project, a low-level system configuration utility that is executed during boot in the machine&amp;#8217;s initramfs. In this early boot stage, Ignition applies all of the configurations defined in the Ignition config file before pivoting the persistent root file system. In this article, we walk through preparing a basic Ignition config file and then booting an FCOS instance in a Linux box using &lt;code&gt;libvirt&lt;/code&gt; and QEMU/KVM. With slight adaptations, these examples also apply to cloud instances.&lt;/p&gt; &lt;p&gt;Ignition configs are standard JSON files that are not encoded in a pretty format. They can be long and hard to read or modify. FCOS offers a compatible format called Fedora CoreOS Configuration (FCC), a YAML-formatted config file that is easier to read/write. To generate Ignition files from an FCC, we can use the Fedora CoreOS Configuration Transpiler (&lt;a href="https://github.com/coreos/fcct" target="_blank" rel="noopener noreferrer"&gt;FCCT&lt;/a&gt;) tool, &lt;code&gt;fcct&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This tool is easy to use, but we first need to create an FCC file. For the sake of this article, here is a simple example (&lt;code&gt;example-fcc.yaml&lt;/code&gt;) that sets a public SSH key for the user &lt;code&gt;core&lt;/code&gt;, the default cloud user in FCOS:&lt;/p&gt; &lt;pre&gt;variant: fcos version: 1.0.0 passwd: users: - name: core ssh_authorized_keys: - ssh-rsa AAAAB3NzaC1yc...&lt;/pre&gt; &lt;p&gt;In this example, the SSH public key was intentionally incomplete. After writing the FCC file, we need to translate it into an Ignition file. &lt;a href="https://github.com/coreos/fcct/releases" target="_blank" rel="noopener noreferrer"&gt;Download the latest release of &lt;code&gt;fcct&lt;/code&gt;&lt;/a&gt; and install it locally (&lt;code&gt;/usr/local/bin&lt;/code&gt; is the best choice for compiled or user-provided binaries).&lt;/p&gt; &lt;p&gt;Now, run the command and transform the FCC file into an Ignition config file:&lt;/p&gt; &lt;pre&gt;$ fcct -input example-fcc.yaml -output example-ignition.ign&lt;/pre&gt; &lt;h3 id="booting-the-system"&gt;Booting Fedora CoreOS&lt;/h3&gt; &lt;p&gt;If you have not downloaded the QEMU image yet, do so now (see the instructions earlier in this article). Once you have the image, start it with the &lt;code&gt;virt-install&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ sudo virt-install --connect qemu:///system \ -n fcos -r 2048 --os-variant=fedora31 --import \ --graphics=none \ --disk size=10,backing_store=/path/to/fedora-coreos-31.20200118.3.0-qemu.x86_64.qcow2 \ --qemu-commandline="-fw_cfg name=opt/com.coreos/config,file=/path/to/example-ignition.ign"&lt;/pre&gt; &lt;p&gt;Please be sure to replace dummy paths with your own correct file locations.&lt;/p&gt; &lt;p&gt;In the above command, I passed a command line argument to QEMU to define the Ignition file to use at boot with the &lt;code&gt;--qemu-commandline&lt;/code&gt; option.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;virt-install&lt;/code&gt; command is a great tool for spinning up local virtual machines from the command line. If we need a graphical alternative to monitor and manage virtual machines, we can use the &lt;code&gt;virt-manager&lt;/code&gt; tool in Gnome and configure the VM manually.&lt;/p&gt; &lt;p&gt;If we are running a Fedora/CentOS/Red Hat Enterprise Linux system on our laptop and SELinux is enabled (as it should be) on our machine, SELinux will block the creation of the instance since the &lt;code&gt;qemu-kvm&lt;/code&gt; process tries to access files in a directory without the &lt;code&gt;virt_image_t&lt;/code&gt; context. To solve this issue, we have two options: Put SELinux in permissive mode or relabel the directory containing the Ignition files.&lt;/p&gt; &lt;p&gt;To enable permissive mode:&lt;/p&gt; &lt;pre&gt;$ sudo setenforce 0 $ sed -i '/^SELINUX=/ s/enforcing/permissive/g' /etc/selinux/config&lt;/pre&gt; &lt;p&gt;Alternatively, to change the file context:&lt;/p&gt; &lt;pre&gt;$ sudo semanage fcontext -a -t virt_image_t '/path/to/ignitions(/.*)?' $ sudo restorecon -Rvv /path/to/ignitions&lt;/pre&gt; &lt;p&gt;Both options are interchangeable for the sake of our lab. Now, let boot the instance. At the end of the fast boot process, we should have output like this:&lt;/p&gt; &lt;pre&gt;Fedora CoreOS 31.20200118.3.0 Kernel 5.4.10-200.fc31.x86_64 on an x86_64 (ttyS0) SSH host key: SHA256:0VrCMwoOmSiU9UNBT/HFzJAPRJFcaR9WE/wpCd3lt2I (ECDSA) SSH host key: SHA256:YAvgZLN6Wiuo+upzRmcDQ2gIOrJHVSHbiITWhrTRhZo (ED25519) SSH host key: SHA256:oxT9DOFu+QuOE4jyIJecTdElBvqREllfnCGFYNpIzu4 (RSA) eth0: 192.168.122.209 fe80::1300:f07a:26f4:2fb2 localhost login:&lt;/pre&gt; &lt;h3 id="first-login"&gt;Logging in the first time&lt;/h3&gt; &lt;p&gt;Along with kernel, OS version, and the SSH host keys, we can see the IPv4 address assigned to the Ethernet interface and a link-local IPv6 address. Now, let’s SSH into the instance with the IPv4 address:&lt;/p&gt; &lt;pre&gt;$ ssh -i /path/to/private_key core@192.168.122.209 Fedora CoreOS 31.20200118.3.0 Tracker: https://github.com/coreos/fedora-coreos-tracker Last login: Thu Feb 6 21:50:26 2020 from 192.168.122.1 [core@localhost ~]$&lt;/pre&gt; &lt;p&gt;Success! We have logged into our Fedora CoreOS machine. The login with SSH keys succeded because the Ignition file passed at boot was correctly applied to the &lt;code&gt;core&lt;/code&gt; user&amp;#8217;s SSH &lt;code&gt;authorized_keys&lt;/code&gt; file. Inspect the modified file to see our injected public key:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ cat /home/core/.ssh/authorized_keys.d/ignition&lt;/pre&gt; &lt;h3 id="running-a-test-container"&gt;Running a test container&lt;/h3&gt; &lt;p&gt;Fedora CoreOS comes with the most used container management tools already installed. &lt;a href="https://podman.io/" target="_blank" rel="noopener noreferrer"&gt;Podman&lt;/a&gt; is the default container runtime. Along with Podman, &lt;a href="https://github.com/containers/skopeo" target="_blank" rel="noopener noreferrer"&gt;Skopeo&lt;/a&gt; and Docker are also installed, with the Docker daemon disabled by default. I personally prefer to use Podman because of its daemonless nature, and relegate Docker only to those scenarios where communication with its Unix socket is mandatory.&lt;/p&gt; &lt;p&gt;Let’s run a simple container with Podman:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ podman run -d -p 8080:80 docker.io/library/nginx&lt;/pre&gt; &lt;p&gt;In this example the container port 80/tcp is mapped to the host port 8080/tcp to let nginx serve requests from the external.&lt;/p&gt; &lt;p&gt;We can check the status with the &lt;code&gt;podman ps&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;[core@localhost ~]$ podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0abc1a48f176 docker.io/library/nginx:latest nginx -g daemon o... 11 seconds ago Up 11 seconds ago 0.0.0.0:8080-&amp;#62;80/tcp dazzling_jackson&lt;/pre&gt; &lt;p&gt;The NGINX server is now up and running and, most importantly, running as a &lt;em&gt;rootless&lt;/em&gt; container in Fedora CoreOS. This result has a great impact from the security perspective because it means that the container uses the mappings provided by the user namespace in Linux.&lt;/p&gt; &lt;p&gt;Rootless containers are a very important feature that Podman implemented in the early stages of the project: for an in-depth analysis, start with the &lt;a href="https://rootlesscontaine.rs/" target="_blank" rel="noopener noreferrer"&gt;rootless containers manifesto&lt;/a&gt;. and be sure to check out this &lt;a href="https://opensource.com/article/19/2/how-does-rootless-podman-work" target="_blank" rel="noopener noreferrer"&gt;article&lt;/a&gt; written by Dan Walsh on Opensource.com.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You now have a test container running in Fedora CoreOS. In the next article in this series, we will dig past the installation and setup and focus on customization and management. Let us know if you were inspired to experiment with Fedora CoreOS or Red Hat CoreOS, and how it went!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F10%2Fhow-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos%2F&amp;#38;linkname=How%20to%20run%20containerized%20workloads%20securely%20and%20at%20scale%20with%20Fedora%20CoreOS" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F10%2Fhow-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos%2F&amp;#38;linkname=How%20to%20run%20containerized%20workloads%20securely%20and%20at%20scale%20with%20Fedora%20CoreOS" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F10%2Fhow-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos%2F&amp;#38;linkname=How%20to%20run%20containerized%20workloads%20securely%20and%20at%20scale%20with%20Fedora%20CoreOS" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F10%2Fhow-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos%2F&amp;#38;linkname=How%20to%20run%20containerized%20workloads%20securely%20and%20at%20scale%20with%20Fedora%20CoreOS" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F10%2Fhow-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos%2F&amp;#38;linkname=How%20to%20run%20containerized%20workloads%20securely%20and%20at%20scale%20with%20Fedora%20CoreOS" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F10%2Fhow-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos%2F&amp;#38;linkname=How%20to%20run%20containerized%20workloads%20securely%20and%20at%20scale%20with%20Fedora%20CoreOS" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F10%2Fhow-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos%2F&amp;#38;linkname=How%20to%20run%20containerized%20workloads%20securely%20and%20at%20scale%20with%20Fedora%20CoreOS" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F10%2Fhow-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos%2F&amp;#038;title=How%20to%20run%20containerized%20workloads%20securely%20and%20at%20scale%20with%20Fedora%20CoreOS" data-a2a-url="https://developers.redhat.com/blog/2020/03/10/how-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos/" data-a2a-title="How to run containerized workloads securely and at scale with Fedora CoreOS"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/10/how-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos/"&gt;How to run containerized workloads securely and at scale with Fedora CoreOS&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sOUH9VQ9v7k" height="1" width="1" alt=""/&gt;</content><summary>The history of container-optimized operating systems is short but filled by a variety of proposals with different degrees of success. Along with CoreOS Container Linux, Red Hat sponsored the Project Atomic community, which is today the umbrella that holds many projects, from Fedora/CentOS/Red Hat Enterprise Linux Atomic Host to container tools (Buildah, skopeo, and others) and Fedora SilverBlue, a...</summary><dc:creator>Gianni Salinetti</dc:creator><dc:date>2020-03-10T07:00:45Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/10/how-to-run-containerized-workloads-securely-and-at-scale-with-fedora-coreos/</feedburner:origLink></entry><entry><title>Beginners Guide - Building a retail web shop workshop</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ui1KEoVwZ9Q/beginners-guide-building-retail-web-shop-workshop.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-beginners_guide_building_a_retail_web_shop_workshop</id><updated>2020-03-10T06:00:04Z</updated><published>2020-03-10T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/--WYzarOAz4c/Xl5KXstrsdI/AAAAAAAAw88/3nvImC4JrgcA2mUcMpPe9qdPfmK5on5cwCNcBGAsYHQ/s1600/online-retail-workshop.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="752" data-original-width="1600" height="150" src="https://1.bp.blogspot.com/--WYzarOAz4c/Xl5KXstrsdI/AAAAAAAAw88/3nvImC4JrgcA2mUcMpPe9qdPfmK5on5cwCNcBGAsYHQ/s320/online-retail-workshop.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;The last few months there have been a series of updates to the various open source decision management technologies.&lt;br /&gt;&lt;br /&gt;These new versions require updates to workshop content ensuring you have material that helps with getting hands-on with the latest technology.&lt;br /&gt;&lt;br /&gt;Today we present the updated &lt;a href="https://bpmworkshop.gitlab.io/rhdm/#/1" target="_blank"&gt;beginners guide workshop&lt;/a&gt; that teaches the use of decision management tooling through a project where you're building your own online retail web shop.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Retail web shop&lt;/h3&gt;This workshop will teach you how to build an online retail web shop that integrates rules, a front-end application, decision tables, rule-flows, and more.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/#/2" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;" target="_blank"&gt;&lt;img alt="beginners guide workshops" border="0" data-original-height="763" data-original-width="1600" height="152" src="https://1.bp.blogspot.com/-goRHUNERE8Y/Xl5L0FPVOFI/AAAAAAAAw9I/-dP3Uc9oH_YGqZWjlasD_i8qITDwl-81wCNcBGAsYHQ/s320/toc-1.png" title="" width="320" /&gt;&lt;/a&gt;Take your first steps on the road to mastering decision management technologies.&lt;br /&gt;&lt;br /&gt;You'll bet led step by step through all you need to learn, design, and deploy your first decision management project.&lt;br /&gt;&lt;h4&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/#/2" target="_blank"&gt;Workshop contents&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Lab 1 - Install Red Hat Decision Manager&lt;/li&gt;&lt;li&gt;Lab 2 - Create a new project&lt;/li&gt;&lt;li&gt;Lab 3 - Create a domain model&lt;/li&gt;&lt;li&gt;Lab 4 - Create a domain specific language (DSL)&lt;/li&gt;&lt;li&gt;Lab 5 - Create guided rules&lt;/li&gt;&lt;li&gt;Lab 6 - Create technical rules (DRL)&lt;/li&gt;&lt;li&gt;Lab 7 - Create guided decision table&lt;/li&gt;&lt;li&gt;Lab 8 - Create rule flow&lt;/li&gt;&lt;li&gt;Lab 9 - Create test scenarios&lt;/li&gt;&lt;li&gt;Lab 10 - Running the online retail web shop &lt;/li&gt;&lt;/ul&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/#/3" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;" target="_blank"&gt;&lt;img alt="beginners guide workshops" border="0" data-original-height="820" data-original-width="1600" height="164" src="https://1.bp.blogspot.com/-Q60jpJVpX5k/Xl5L57GfeJI/AAAAAAAAw9M/mmB1FL7Lw6EvUYjTFQR5YbVcOt_I-pVIACNcBGAsYHQ/s320/toc-2.png" title="" width="320" /&gt;&lt;/a&gt;With all the latest updates, links to downloads for all needed product tooling on Red Hat Developers, you'll be on your way to learning how to effectively use decision management tooling in no time.&lt;br /&gt;&lt;br /&gt;If you have any comments and or suggestions while using the workshop, please &lt;a href="https://gitlab.com/bpmworkshop/bpmworkshop.gitlab.io/issues/new" target="_blank"&gt;bring it to our attention&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sFpepTuJZNI:PyHaxHNNt7Q:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sFpepTuJZNI:PyHaxHNNt7Q:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sFpepTuJZNI:PyHaxHNNt7Q:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=sFpepTuJZNI:PyHaxHNNt7Q:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sFpepTuJZNI:PyHaxHNNt7Q:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=sFpepTuJZNI:PyHaxHNNt7Q:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sFpepTuJZNI:PyHaxHNNt7Q:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=sFpepTuJZNI:PyHaxHNNt7Q:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sFpepTuJZNI:PyHaxHNNt7Q:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sFpepTuJZNI:PyHaxHNNt7Q:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=sFpepTuJZNI:PyHaxHNNt7Q:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/sFpepTuJZNI" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ui1KEoVwZ9Q" height="1" width="1" alt=""/&gt;</content><summary>The last few months there have been a series of updates to the various open source decision management technologies. These new versions require updates to workshop content ensuring you have material that helps with getting hands-on with the latest technology. Today we present the updated beginners guide workshop that teaches the use of decision management tooling through a project where you're bui...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-03-10T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/sFpepTuJZNI/beginners-guide-building-retail-web-shop-workshop.html</feedburner:origLink></entry><entry><title>Shenandoah GC in JDK 14, Part 2: Concurrent roots and class unloading</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/i6olHB1kU4g/" /><category term="class unloading" scheme="searchisko:content:tags" /><category term="concurrent" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JDK 14" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="roots" scheme="searchisko:content:tags" /><category term="Shenandoah GC" scheme="searchisko:content:tags" /><author><name>Roman Kennke</name></author><id>searchisko:content:id:jbossorg_blog-shenandoah_gc_in_jdk_14_part_2_concurrent_roots_and_class_unloading</id><updated>2020-03-09T07:00:53Z</updated><published>2020-03-09T07:00:53Z</published><content type="html">&lt;p&gt;The first part of this miniseries about Shenandoah GC in JDK 14 covered &lt;a href="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/" target="_blank" rel="noopener noreferrer"&gt;self-fixing barriers&lt;/a&gt;. This article discusses concurrent roots processing and concurrent class unloading, both of which aim to reduce GC pause time by moving GC work from the pause to a concurrent phase.&lt;/p&gt; &lt;h2&gt;Concurrent roots processing&lt;/h2&gt; &lt;p&gt;Once concurrent marking is done, Shenandoah needs to complete the marking and prepare for evacuation. While these are two logically independent operations, they are performed under a single pause that is confusingly named &amp;#8220;Final Mark.&amp;#8221;&lt;/p&gt; &lt;p&gt;While evacuation itself is concurrent in Shenandoah, there are still a few things that need to be done at pause. These include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Pre-evacuating and updating non-weak roots (for example, thread stacks and strong JNI handles).&lt;/li&gt; &lt;li&gt;Pre-evacuating and cleaning up weak roots (for example, string tables and weak JNI handles).&lt;/li&gt; &lt;li&gt;Unloading classes.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since this work is done during the pause, it affects pause times. To minimize these pause times, we want to perform most of these tasks concurrently. This approach is particularly important for any GC roots that are unbounded in size.&lt;/p&gt; &lt;p&gt;The reason we need to pre-evacuate and update all GC roots during the pause is to ensure the strong invariant. Any object that is read from or stored to must be in to-space.&lt;/p&gt; &lt;p&gt;Here is the important caveat: Loading the objects out of GC roots does not employ load reference barriers. So, the application has to see the correct copy of the object, and we have to perform the evacs and updates before unblocking from the pause. In this problem statement lies a relatively simple solution: Ensure that loads from relevant GC roots are guarded by a Load Reference Barrier (LRB) that we call &amp;#8220;native LRB,&amp;#8221; and move the actual updating of those roots to the concurrent phase.&lt;/p&gt; &lt;p&gt;The so-called &amp;#8220;weak&amp;#8221; roots are special, though. During marking, we might determine that certain GC roots are no longer reachable. An example of this issue is weak JNI handles. Once the weak JNI handle is declared dead (during final mark), it should not be accidentally resurrected—for example, by inserting the reference to its presumed-dead object back into the heap.&lt;/p&gt; &lt;p&gt;Therefore, not only do we have to pre-evacuate and update the weak roots that are reachable (like all other roots), we also need to clean up the weak roots that are not reachable so the application cannot possibly touch and resurrect them.&lt;/p&gt; &lt;p&gt;Moving this cleanup to the concurrent phase requires extra work for the native LRB, which checks whether a weak root is reachable (as told by the marking bitmap). If the weak root is not reachable, the native LRB simply returns NULL, thus pretending to the rest of the JVM that the handle is already cleaned. This process ensures that we do not accidentally make an already-unreachable object reachable again.&lt;/p&gt; &lt;p&gt;In pseudocode, the native LRB looks like this:&lt;/p&gt; &lt;pre&gt;T native_LRB(T* addr) { T obj = *addr; // Load from GC root if (is_reachable(obj)) { return LRB(obj); } else { return NULL; } } &lt;/pre&gt; &lt;h2&gt;Concurrent class unloading&lt;/h2&gt; &lt;p&gt;Another large item during the final mark pause used to be &lt;em&gt;class unloading&lt;/em&gt;, which is important for applications that make heavy use of class loaders. This situation is usually the case for application servers and other large-ish applications (e.g., IDEs). However, class unloading is also relevant when using anonymous classes (each of which has its own class loader) and lambdas (similar to anonymous classes).&lt;/p&gt; &lt;p&gt;Class unloading is a complex procedure. It requires the code to determine whether or not classes (or rather, class loaders) are reachable. This check already happens during concurrent marking. When reachability of all objects (including class-loaders) is established, all unreachable class loaders and their classes and auxiliary data structures need to be unlinked and cleaned. Compiled code that belongs to those classes needs to get cleaned.&lt;/p&gt; &lt;p&gt;For the most part, Shenandoah&amp;#8217;s implementation builds on the work done by ZGC developers in JDK 13. This implementation does require the native barriers described above. In addition to that, it also requires so-called &amp;#8220;nmethod entry barriers.&amp;#8221;&lt;/p&gt; &lt;p&gt;Usually, during the pause, we need to pre-evacuate and update all references that are embedded in all compiled methods. Ideally, we would only pre-evacuate/update references in methods that are currently executed (i.e., reachable by frames on the stacks), and handle other methods concurrently. In order for this approach to work, we need to handle the scenario where a thread starts executing a method.&lt;/p&gt; &lt;p&gt;The idea behind nmethod barriers is that they are executed whenever a method is called. Before execution is handed over to the method, the GC barrier is called to do certain things. In Shenandoah, this means to scan the method&amp;#8217;s code for embedded objects (constants) and evacuate-and-update them, in order to ensure the strong invariant above. Live nmethods are armed at the final mark pause and disarmed by either GC threads during a concurrent phase or by Java threads when the nmethods are about to be executed.&lt;/p&gt; &lt;p&gt;The net advantage of concurrent roots processing and concurrent class unloading is that the final mark pause is shorter, and thus global latency is improved, even when the application makes heavy use of class loaders or JNI handles.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#038;title=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" data-a2a-url="https://developers.redhat.com/blog/2020/03/09/shenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading/" data-a2a-title="Shenandoah GC in JDK 14, Part 2: Concurrent roots and class unloading"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/09/shenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading/"&gt;Shenandoah GC in JDK 14, Part 2: Concurrent roots and class unloading&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/i6olHB1kU4g" height="1" width="1" alt=""/&gt;</content><summary>The first part of this miniseries about Shenandoah GC in JDK 14 covered self-fixing barriers. This article discusses concurrent roots processing and concurrent class unloading, both of which aim to reduce GC pause time by moving GC work from the pause to a concurrent phase. Concurrent roots processing Once concurrent marking is done, Shenandoah needs to complete the marking and prepare for evacuat...</summary><dc:creator>Roman Kennke</dc:creator><dc:date>2020-03-09T07:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/09/shenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading/</feedburner:origLink></entry><entry><title>CDI for the future</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EQA2BvZJcIc/CDI_for_the_future.html" /><category term="feed_group_name_cdi" scheme="searchisko:content:tags" /><category term="feed_name_cdi" scheme="searchisko:content:tags" /><category term="proposal" scheme="searchisko:content:tags" /><author /><id>searchisko:content:id:jbossorg_blog-cdi_for_the_future</id><updated>2020-03-11T09:33:32Z</updated><published>2020-03-09T00:00:00Z</published><content type="html">&lt;div class="imageblock" style="float: right"&gt; &lt;div class="content"&gt; &lt;img src="http://www.cdi-spec.org/images/inside_quark_web.jpg" alt="inside quark web" width="285"&gt; &lt;/img&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A few months ago, CDI turned 10! Yes, CDI 1.0 was released 10 years ago and is today one of the most successful specifications in Java EE and now Jakarta EE. Providing a very efficient programming model and elegant means to integrate with 3rd party technology it rapidly became the Java EE cornerstone. As other specifications were adopting its programming model, CDI brought a unified way to write Java EE code and made the platform more consistent than before. So when MicroProfile was launched nearly four years ago, it was obvious that CDI should be part of the core platform along with JAX-RS and JSON-P. Today, MicroProfile programming model relies deeply on CDI and the platform success is partly due to the consistency CDI brings to developer experience.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Yet, CDI was designed more than 10 years ago at a time when monolithic applications were deployed as ears and wars sharing a highly dynamic yet monolithic application server. Things have changed, where containers are immutable, obviating the need for hot redeploy and dynamic discovery, and aspects that we used to rely on traditional application servers for, such as availability and redundancy are now handled using cloud orchestration with kubernetes. We also have seen a shift from monolithic apps to a greater emphasis on decoupling and resilience through microservices. These factors have given rise to the “single app stack”, where the framework and the application are fused as one. With traditional application servers, applications had to be dynamic &lt;strong&gt;because&lt;/strong&gt; they needed to differentiate their needs on shared application server infrastructure, where configuration and resources applied equally to all applications. With single application stacks, applications can express their needs more statically because they are scoped to a single application.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In addition, today’s deployments require increasing efficiency to achieve cost reduction, whether deploying to cloud providers or in-house virtualized data centers. A single application server instance is often replaced by a dozen microservice “single-app stack” instances, with double or triple that amount to achieve redundancy. CDI, as it is today, is not suited for this cloud ready approach. Some of its features imply a rather heavy resource consumption (both boot-time and memory usage) in its implementations.&lt;br&gt; This blog post covers some of my CDI vision for the future to make the specification relevant for the next 10 years.&lt;/br&gt; &lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="how-to-make-cdi-cloud-ready"&gt;&lt;a class="anchor" href="#how-to-make-cdi-cloud-ready" /&gt;How to make CDI cloud ready?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If we want to make CDI a cloud ready specification we have to look into all of its requirements that impact memory, cpu, and more broadly performance. As part of that we should revisit which capabilities and features are still required, since as mentioned above application architecture and deployment environments have changed significantly over the years. Although, that alone is not enough, we need to ensure CDI is flexible and adaptable enough to allow for innovative implementation approaches, such as build-time injection wiring.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Of course, It should be possible to implement runtime-based approaches in a more efficient manner, and in many ways these goals are complimentary. One example of this is overly aggressive bean discovery and thus the extensive type scanning required by CDI during initialization. While bean discovery allows seamless integration in that 3rd party non-CDI classes can be discovered as bean, storing state and generating events on classes which were never intended to be a bean is very costly. That’s the reason why, when we introduced CDI for Java SE in CDI 2.0, we provided a way to disable &lt;a href="https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#se_container_initializer"&gt;bean discovery&lt;/a&gt; and let the developers explicitly declare classes that should become beans or allow the creation of synthetic beans before launching the container.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="eclipse-microprofile-challenges"&gt;&lt;a class="anchor" href="#eclipse-microprofile-challenges" /&gt;Eclipse MicroProfile Challenges&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The CDI spec was originally written with Jakarta EE integration in mind, and as such, it assumes the full platform is available and thus the spec and the TCKs require JSF, EL, and EJB. This is not the best fit for MicroProfile, since it targets microservice usage patterns. Under MicroProfile not even Servlet is required, let alone EJB, EL, and JSF. Likewise, MicroProfile can’t be based on CDI SE, since SE does not include JAX-RS integration, which is essential for REST based microservices.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To solve this problem, the MicroProfile specifications effectively depend on a subset of the CDI spec, explicitly noting the above API elements are to be excluded. This is awkward and has led to confusion about how one achieves compliance.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Ultimately, the problem is that the CDI spec couples too many elements together. We need greater flexibility to allow for as many different platforms and environments to adopt and build off the standard.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="introducing-cdi-lite"&gt;&lt;a class="anchor" href="#introducing-cdi-lite" /&gt;Introducing CDI Lite&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you followed the CDI 2.0 expert group work a few years back, this title should ring a bell. CDI Lite was in the air back then, since we did expect some future need of added flexibility, but due to a lack of time and clear target we postponed its addition to the spec.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With the CDI programming model being core to MicroProfile, it seems obvious that its use cases should be considered as a first-class usage of CDI. Further, we should enable CDI composition into any other platform, such as future Jakarta EE profiles, or combining it with other frameworks on top of plain old Java as a contribution to future innovations within the Java ecosystem.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So what should CDI Lite’s goal be? In my opinion we should define it as: “the core subset of CDI features that enables the greatest number of CDI implementations, CDI usage within the Java ecosystem, and opens the door to innovation, notably build-time injection approaches.”&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Not only would this improve the existing CDI ecosystem, it opens the door to many other interesting use cases such as:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Transcompilation.&lt;/strong&gt; It becomes possible to compile Java based injection into other language environments, such as Javascript. This is currently possible with Dagger and Kodein for Kotlin but not CDI&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mobile platform support.&lt;/strong&gt; By enabling build time injection, it also becomes possible for an implementer to target mobile platforms such as Android.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Native Compilation.&lt;/strong&gt; By enabling build-time Java, the door is also opened to generating optimal native compiled images utilizing static compilers such as the GraalVM project.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="how-to-add-cdi-lite-to-the-spec"&gt;&lt;a class="anchor" href="#how-to-add-cdi-lite-to-the-spec" /&gt;How to add CDI lite to the spec?&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Today, thanks to CDI 2.0 work, the spec is split into 3 parts: core, CDI for SE and CDI for EE.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="http://www.cdi-spec.org/images/cdi2-layers.png" alt="cdi2 layers"&gt; &lt;/img&gt; &lt;div class="title"&gt;Figure 1. Current CDI spec layering&lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Users and implementers are already familiar with the notion of different “flavors” for CDI. Adding CDI Lite implies some work but the spec is already well organized to support such a change. Roughly, CDI lite should be defined as the core subset of which core, EE and SE extend. Further the EE spec integrations themselves can be defined in such a way so that each framework’s integration is optional, allowing any combination such as a standalone JAX-RS implementation with CDI support. Additionally this would enable future additional Jakarta EE profiles beyond just web and full.&lt;br&gt; This evolution would split Core CDI in CDI Lite and “Heavy CDI” as shown below. The CDI lite part could benefit CDI for Se as other platforms like MicroProfile.&lt;/br&gt; &lt;/p&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="http://www.cdi-spec.org/images/cdi3-layers.png" alt="cdi3 layers"&gt; &lt;/img&gt; &lt;div class="title"&gt;Figure 2. Spliting CDI Core in &lt;em&gt;lite&lt;/em&gt; and &lt;em&gt;full&lt;/em&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="cdi-lite-scope"&gt;&lt;a class="anchor" href="#cdi-lite-scope" /&gt;CDI Lite Scope&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The essential fundamental core of CDI is the programming model exposed to users which enables uniform annotation driven injection and further supports contextual state driven injection. Just the annotations defined in JSR-330 are not enough, there is also the need for a number of other common patterns and usages to make the framework complete.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Support popular CDI features like:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Beans (class, producers and synthetic beans)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CDI DI (typesafe resolution, qualifiers, dynamic lookup)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Most built-in scopes (singleton, application, request, and dependent)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Contextual instances and their lifecycle&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Interceptors&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Events&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Other features may be added but may not have reached broad adoption like decorators, transactional events or specialization, so additional discussion would be needed.. Ideally we would utilize the opportunity to reduce technical debt, since each increases code complexity, and some of these underused capabilities are a major source of bug reports:&lt;/p&gt; &lt;/div&gt; &lt;div class="olist arabic"&gt; &lt;ol class="arabic"&gt; &lt;li&gt; &lt;p&gt;Decorators have 67 issues in the RI alone&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specialization has 28 RI issues and 6 open spec issues&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="outside-cdi-lite-scope"&gt;&lt;a class="anchor" href="#outside-cdi-lite-scope" /&gt;Outside CDI Lite Scope&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A number of features are only relevant to particular framework integrations. For example SessionScope is only relevant if the runtime environment implements Servlet (HttpSession), and ConversationScope is incomplete without EL and JSF. These technologies are not needed in a microservice scenario, as is the case in MicroProfile, and so should not be required.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Another capability that should be excluded from CDI Lite is portable extensions, but still part of CDI Full. Portable extensions run in opposition to the goals described above, since they are inherently a runtime-only contract which mandates a very specific container initialization lifecycle. As an example, portable extensions are often stateful, but they are not serializable, and any state they have can be passed into other beans or as part of lifecycle events that are required to occur. Further they are allowed to manipulate almost anything pertaining to a bean at just about every phase of the CDI lifecycle. These factors effectively preclude any implementation that aims to pregenerate wiring at build time. Yet extension implementations rarely need such an open-ended do-anything-you-want API.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Instead, the CDI-Lite could address these concerns through purpose-built SPIs, such as introducing a new explicit way to register annotated types and beans. It’s already partly done in CDI for SE in which users can programmatically add synthetic beans without portable extensions.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All of the elements outside of the CDI-Lite scope would still be a part of the full specification, as the intention is not to affect existing implementations, only to open the door to new approaches and new implementations.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the end, we would end up with a much more flexible standard that benefits everyone and carries over the same powerful programming model to new use-cases while bringing improved efficiency to modern cloud deployment scenarios. &lt;br&gt; CDI Llite introduction wouldn’t be the pretext to deprecate existing features but to make the framework more modular and ready for all todays use cases and make it ready for future evolution.&lt;/br&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="conclusion"&gt;&lt;a class="anchor" href="#conclusion" /&gt;Conclusion&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As you may guess this spec evolution idea will require a lot of analysis and discussion. Should the Jakarta Contexts and Dependency Injection Project agree to go this way, we could imagine starting work on this new CDI version, but as usual, feedback from the community is very important to us. So feel free to share your thoughts in the comments of this post.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Thanks for helping us keep the CDI programming model around for the next 10 years!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EQA2BvZJcIc" height="1" width="1" alt=""/&gt;</content><summary>A few months ago, CDI turned 10! Yes, CDI 1.0 was released 10 years ago and is today one of the most successful specifications in Java EE and now Jakarta EE. Providing a very efficient programming model and elegant means to integrate with 3rd party technology it rapidly became the Java EE cornerstone. As other specifications were adopting its programming model, CDI brought a unified way to write J...</summary><dc:date>2020-03-09T00:00:00Z</dc:date><feedburner:origLink>http://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future.html</feedburner:origLink></entry><entry><title>Weekly Editorial 2019-03-06</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XKdmLgO_uh4/weekly-editorial-2019-03-06" /><category term="byteman" scheme="searchisko:content:tags" /><category term="Camel" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="git" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><author><name>lightguard</name></author><id>searchisko:content:id:jbossorg_blog-weekly_editorial_2019_03_06</id><updated>2020-03-06T18:34:46Z</updated><published>2020-03-06T18:34:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:a45bd5d9-40c3-4c72-a0c3-67271e869ead] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Welcome once again to another Weekly Editorial. We're still looking for a new home for this editorial, but we will certainly let you all know when we find it! Thank you for staying with us. Let's dive in!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;New Releases&lt;/h2&gt;&lt;ul style="list-style-type: disc;"&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/03/03/2020-03-03-infinispan-11.0.0.Alpha2/" rel="nofollow"&gt;Infinispan 11.0.0.Alpha2 and 10.1.3.Final&lt;/a&gt; - There's not much there for users in the new Alpha, mostly prep work, but the 10.1.3 version has a number of bug fixes&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/02/24/2020-02-24-infinispan-operator-1.1.1/" rel="nofollow"&gt;Inifispan Operator 1.1.1.Final&lt;/a&gt; is out! This release focuses on bug fixes and performance improvements&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://bytemanblog.blogspot.com/2020/02/byteman-4011-has-been-released.html" rel="nofollow"&gt;Byteman has a new bug fix release out 4.0.11&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Blogs&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Eric Schabell has &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/03/integrating-saas-applications-example-crm-connector-integration.html" rel="nofollow"&gt;a new entry&lt;/a&gt; in his SaaS Integration series. In this entry he talks about connectors.&lt;/li&gt;&lt;li&gt;Eric also has &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/02/beginners-guilde-expanding-your-devops-toolbox-workshop.html" rel="nofollow"&gt;an update to his workshop toolbox&lt;/a&gt; if you're interested in the process automation space.&lt;/li&gt;&lt;li&gt;Claus Ibsen &lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/02/upcoming-webinar-whats-new-in-apache.html" rel="nofollow"&gt;hosted a webinar about new features in Apache Camel 3&lt;/a&gt;. The event happened on March 3rd, but you can download the video on demand.&lt;/li&gt;&lt;li&gt;If you like the gritty details of Garbage Collection using the Shenandoah GC, head over to the &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/" rel="nofollow"&gt;developers blog&lt;/a&gt; where a new series is starting!&lt;/li&gt;&lt;li&gt;Are you using Tekton and Maven and want to pull a little more speed out of those pipelines? &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/26/speed-up-maven-builds-in-tekton-pipelines/" rel="nofollow"&gt;Siamak Sadeghianfar has an article that tells you exactly how to do that&lt;/a&gt; this week.&lt;/li&gt;&lt;li&gt;Lastly, &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/25/how-to-ignore-files-in-git-without-gitignore/" rel="nofollow"&gt;Heiko Rupp explores how to ignore files in git without using the .gitignore file&lt;/a&gt;! Didn't know about that, did you?&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Once again, thank you everyone for staying with us. We're looking forward to more great content in a couple of weeks.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:a45bd5d9-40c3-4c72-a0c3-67271e869ead] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XKdmLgO_uh4" height="1" width="1" alt=""/&gt;</content><summary>Welcome once again to another Weekly Editorial. We're still looking for a new home for this editorial, but we will certainly let you all know when we find it! Thank you for staying with us. Let's dive in!   New Releases Infinispan 11.0.0.Alpha2 and 10.1.3.Final - There's not much there for users in the new Alpha, mostly prep work, but the 10.1.3 version has a number of bug fixes Inifispan Operator...</summary><dc:creator>lightguard</dc:creator><dc:date>2020-03-06T18:34:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/03/06/weekly-editorial-2019-03-06</feedburner:origLink></entry></feed>
